const CODE_SNIPPETS = [{"languageName":"rust","sourceFiles":[{"fileName":"arcrose-clink-src-links-tags.rs","linesOfCode":[{"number":0,"indent":0,"code":"use std::io::BufRead;"},{"number":1,"indent":0,"code":"use errors::{ClinkResult, ClinkError};"},{"number":2,"indent":0,"code":""},{"number":3,"indent":0,"code":"/// Implements parsing functionality that handles extracting information about tags which are linked to by"},{"number":4,"indent":0,"code":"/// clink sections and formatted `[clink tag](tag_name)`."},{"number":5,"indent":0,"code":"pub struct TagParser<R>"},{"number":6,"indent":1,"code":"    where R: BufRead"},{"number":7,"indent":0,"code":"{"},{"number":8,"indent":1,"code":"    file_path: String,"},{"number":9,"indent":1,"code":"    file_reader: R"},{"number":10,"indent":0,"code":"}"},{"number":11,"indent":0,"code":""},{"number":12,"indent":0,"code":"/// Contains information parsed out of a clink tag."},{"number":13,"indent":0,"code":"#[derive(Clone, Debug, PartialEq, Eq)]"},{"number":14,"indent":0,"code":"pub struct Tag {"},{"number":15,"indent":1,"code":"    pub line_number: u64,"},{"number":16,"indent":1,"code":"    pub file_path: String,"},{"number":17,"indent":1,"code":"    pub tag_names: Vec<String>"},{"number":18,"indent":0,"code":"}"},{"number":19,"indent":0,"code":""},{"number":20,"indent":0,"code":"impl<R: BufRead> TagParser<R> {"},{"number":21,"indent":1,"code":"    /// Constructs a new `TagParser` that reads from a specified file."},{"number":22,"indent":1,"code":"    pub fn new<T: Into<String>>(path: T, reader: R) -> TagParser<R> {"},{"number":23,"indent":2,"code":"        TagParser {"},{"number":24,"indent":3,"code":"            file_path: path.into(),"},{"number":25,"indent":3,"code":"            file_reader: reader"},{"number":26,"indent":2,"code":"        }"},{"number":27,"indent":1,"code":"    }"},{"number":28,"indent":0,"code":""},{"number":29,"indent":1,"code":"    /// Parses a file given to the `TagParser` into a vector of `Tags`, denoting locations that can be pointed to by"},{"number":30,"indent":1,"code":"    /// clink sections."},{"number":31,"indent":1,"code":"    ///"},{"number":32,"indent":1,"code":"    /// ## Algorithm Summary"},{"number":33,"indent":1,"code":"    ///"},{"number":34,"indent":1,"code":"    /// 1. Reach each line of the file provided."},{"number":35,"indent":1,"code":"    /// 2. In each line, look for an occurrence of \"[clink tag]\""},{"number":36,"indent":1,"code":"    /// 3. When an occurrence is found, parse the tag names provided between parentheses."},{"number":37,"indent":1,"code":"    ///   1. Split the string on \",\" and trim each result."},{"number":38,"indent":1,"code":"    /// 4. Return a collection of all the tags found."},{"number":39,"indent":1,"code":"    pub fn parse(self) -> ClinkResult<Vec<Tag>> {"},{"number":40,"indent":2,"code":"        let mut tags: Vec<Tag> = Vec::new();"},{"number":41,"indent":2,"code":"        for (line_num, line) in self.file_reader.lines().enumerate() {"},{"number":42,"indent":3,"code":"            let line = line?;"},{"number":43,"indent":3,"code":"            let line_num = line_num + 1;"},{"number":44,"indent":3,"code":"            if let Some(open_delim_index) = line.find(\"[clink tag]\") {"},{"number":45,"indent":4,"code":"                let offset = open_delim_index + \"[clink tag]\".len();"},{"number":46,"indent":4,"code":"                let parsed_tag = Tag::parse(line_num as u64, &self.file_path, &line[offset..])?;"},{"number":47,"indent":4,"code":"                tags.push(parsed_tag);"},{"number":48,"indent":3,"code":"            }"},{"number":49,"indent":2,"code":"        }"},{"number":50,"indent":2,"code":"        Ok(tags)"},{"number":51,"indent":1,"code":"    }"},{"number":52,"indent":0,"code":"}"},{"number":53,"indent":0,"code":""},{"number":54,"indent":0,"code":"impl Tag {"},{"number":55,"indent":1,"code":"    /// Parses a list of names from a clink tag."},{"number":56,"indent":1,"code":"    ///"},{"number":57,"indent":1,"code":"    /// # Expected format"},{"number":58,"indent":1,"code":"    ///"},{"number":59,"indent":1,"code":"    /// ```"},{"number":60,"indent":1,"code":"    /// (tag_name[, name2[, ...]])"},{"number":61,"indent":1,"code":"    /// ```"},{"number":62,"indent":1,"code":"    fn parse(line_num: u64, file_path: &str, name_section: &str) -> ClinkResult<Tag> {"},{"number":63,"indent":2,"code":"        let paren_start = name_section "},{"number":64,"indent":3,"code":"            .find(\"(\")"},{"number":65,"indent":3,"code":"            .ok_or(ClinkError::NoTagNames(name_section.to_owned()))?;"},{"number":66,"indent":2,"code":"        let paren_end = name_section "},{"number":67,"indent":3,"code":"            .find(\")\")"},{"number":68,"indent":3,"code":"            .ok_or(ClinkError::UnclosedNameSection(name_section.to_owned()))?;"},{"number":69,"indent":2,"code":"        let name_section = &name_section[paren_start + 1..paren_end];"},{"number":70,"indent":2,"code":"        let tag_names = name_section"},{"number":71,"indent":3,"code":"            .split(\",\")"},{"number":72,"indent":3,"code":"            .map(str::trim)"},{"number":73,"indent":3,"code":"            .map(|s| s.to_owned())"},{"number":74,"indent":3,"code":"            .collect::<Vec<String>>();"},{"number":75,"indent":2,"code":"        let has_invalid_tag_names = tag_names"},{"number":76,"indent":3,"code":"            .clone()"},{"number":77,"indent":3,"code":"            .iter()"},{"number":78,"indent":3,"code":"            .find(|&name| name == \"\" || name.contains(\" \"))"},{"number":79,"indent":3,"code":"            .is_some();"},{"number":80,"indent":2,"code":"        if has_invalid_tag_names {"},{"number":81,"indent":3,"code":"            return Err(ClinkError::BadTagName(name_section.to_owned()));"},{"number":82,"indent":2,"code":"        }"},{"number":83,"indent":2,"code":"        Ok(Tag {"},{"number":84,"indent":3,"code":"            line_number: line_num,"},{"number":85,"indent":3,"code":"            file_path: file_path.to_owned(),"},{"number":86,"indent":3,"code":"            tag_names: tag_names,"},{"number":87,"indent":2,"code":"        })"},{"number":88,"indent":1,"code":"    }"},{"number":89,"indent":0,"code":"}"},{"number":90,"indent":0,"code":""},{"number":91,"indent":0,"code":"#[cfg(test)]"},{"number":92,"indent":0,"code":"mod tests {"},{"number":93,"indent":1,"code":"    use std::io::Cursor;"},{"number":94,"indent":1,"code":"    use super::*;"},{"number":95,"indent":0,"code":""},{"number":96,"indent":1,"code":"    #[test]"},{"number":97,"indent":1,"code":"    fn tag_parser_handles_single_tag_anchors() {"},{"number":98,"indent":2,"code":"        let input = \"import os"},{"number":99,"indent":2,"code":"        # [clink tag](main)"},{"number":100,"indent":2,"code":"        def main():"},{"number":101,"indent":3,"code":"            print 'Hello world!'\";"},{"number":102,"indent":2,"code":"        let expected_tags = vec!["},{"number":103,"indent":3,"code":"            Tag {"},{"number":104,"indent":4,"code":"                line_number: 2,"},{"number":105,"indent":4,"code":"                file_path: \"/main.py\".to_owned(),"},{"number":106,"indent":4,"code":"                tag_names: vec![\"main\".to_owned()],"},{"number":107,"indent":3,"code":"            }"},{"number":108,"indent":2,"code":"        ];"},{"number":109,"indent":2,"code":"        let parser = TagParser::new(\"/main.py\", Cursor::new(input));"},{"number":110,"indent":2,"code":"        let tags_found = parser.parse().unwrap();"},{"number":111,"indent":2,"code":"        assert_eq!(tags_found.len(), expected_tags.len());"},{"number":112,"indent":2,"code":"        assert_eq!(tags_found[0], expected_tags[0]);"},{"number":113,"indent":1,"code":"    }"},{"number":114,"indent":0,"code":""},{"number":115,"indent":1,"code":"    #[test]"},{"number":116,"indent":1,"code":"    fn tag_parser_handles_multiple_tag_names() {"},{"number":117,"indent":2,"code":"        let input = \"import os"},{"number":118,"indent":2,"code":"        def main():"},{"number":119,"indent":3,"code":"            # [clink tag](first, second)"},{"number":120,"indent":3,"code":"            print 'Hello world'\";"},{"number":121,"indent":2,"code":"        let expected_tags = vec!["},{"number":122,"indent":3,"code":"            Tag {"},{"number":123,"indent":4,"code":"                line_number: 3,"},{"number":124,"indent":4,"code":"                file_path: \"/src/hello.py\".to_owned(),"},{"number":125,"indent":4,"code":"                tag_names: vec!["},{"number":126,"indent":5,"code":"                    \"first\".to_owned(),"},{"number":127,"indent":5,"code":"                    \"second\".to_owned()"},{"number":128,"indent":4,"code":"                ]"},{"number":129,"indent":3,"code":"            }"},{"number":130,"indent":2,"code":"        ];"},{"number":131,"indent":2,"code":"        let parser = TagParser::new(\"/src/hello.py\", Cursor::new(input));"},{"number":132,"indent":2,"code":"        let tags_found = parser.parse().unwrap();"},{"number":133,"indent":2,"code":"        assert_eq!(tags_found.len(), expected_tags.len());"},{"number":134,"indent":2,"code":"        assert_eq!(tags_found[0], expected_tags[0]);"},{"number":135,"indent":1,"code":"    }"},{"number":136,"indent":0,"code":""},{"number":137,"indent":1,"code":"    #[test]"},{"number":138,"indent":1,"code":"    fn tag_parser_handles_multiple_tags() {"},{"number":139,"indent":2,"code":"        let input = \"/// Hello world!"},{"number":140,"indent":2,"code":"        // [clink tag](hello)"},{"number":141,"indent":2,"code":"        fn hello() {"},{"number":142,"indent":3,"code":"            // [clink tag](hello, implementation)"},{"number":143,"indent":3,"code":"            println!(\\\"Hello world!\\\");"},{"number":144,"indent":2,"code":"        }\";"},{"number":145,"indent":2,"code":"        let expected_tags = vec!["},{"number":146,"indent":3,"code":"            Tag {"},{"number":147,"indent":4,"code":"                line_number: 2,"},{"number":148,"indent":4,"code":"                file_path: \"/src/main.rs\".to_owned(),"},{"number":149,"indent":4,"code":"                tag_names: vec![\"hello\".to_owned()]"},{"number":150,"indent":3,"code":"            },"},{"number":151,"indent":3,"code":"            Tag {"},{"number":152,"indent":4,"code":"                line_number: 4,"},{"number":153,"indent":4,"code":"                file_path: \"/src/main.rs\".to_owned(),"},{"number":154,"indent":4,"code":"                tag_names: vec!["},{"number":155,"indent":5,"code":"                    \"hello\".to_owned(),"},{"number":156,"indent":5,"code":"                    \"implementation\".to_owned()"},{"number":157,"indent":4,"code":"                ]"},{"number":158,"indent":3,"code":"            }"},{"number":159,"indent":2,"code":"        ];"},{"number":160,"indent":2,"code":"        let parser = TagParser::new(\"/src/main.rs\", Cursor::new(input));"},{"number":161,"indent":2,"code":"        let tags_found = parser.parse().unwrap();"},{"number":162,"indent":2,"code":"        assert_eq!(tags_found.len(), expected_tags.len());"},{"number":163,"indent":2,"code":"        assert_eq!(tags_found[0], expected_tags[0]);"},{"number":164,"indent":2,"code":"        assert_eq!(tags_found[1], expected_tags[1]);"},{"number":165,"indent":1,"code":"    }"},{"number":166,"indent":0,"code":""},{"number":167,"indent":1,"code":"    #[test]"},{"number":168,"indent":1,"code":"    fn tag_parser_errors_on_missing_tag_names() {"},{"number":169,"indent":2,"code":"        let input = \"// [clink tag]()\";"},{"number":170,"indent":2,"code":"        let parser = TagParser::new(\"/src/main.rs\", Cursor::new(input));"},{"number":171,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":172,"indent":1,"code":"    }"},{"number":173,"indent":0,"code":""},{"number":174,"indent":1,"code":"    #[test]"},{"number":175,"indent":1,"code":"    fn tag_parser_errors_on_unclosed_parens() {"},{"number":176,"indent":2,"code":"        let input = \"// [clink tag](hello\";"},{"number":177,"indent":2,"code":"        let parser = TagParser::new(\"/src/main.rs\", Cursor::new(input));"},{"number":178,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":179,"indent":1,"code":"    }"},{"number":180,"indent":0,"code":""},{"number":181,"indent":1,"code":"    #[test]"},{"number":182,"indent":1,"code":"    fn tag_parser_skips_malformed_tag() {"},{"number":183,"indent":2,"code":"        // Notice: click instead of clink"},{"number":184,"indent":2,"code":"        let input = \"// [click tag](hello)\";"},{"number":185,"indent":2,"code":"        let parser = TagParser::new(\"/src/main.rs\", Cursor::new(input));"},{"number":186,"indent":2,"code":"        let tags_found = parser.parse().unwrap();"},{"number":187,"indent":2,"code":"        assert_eq!(tags_found.len(), 0);"},{"number":188,"indent":1,"code":"    }"},{"number":189,"indent":0,"code":"}"}]},{"fileName":"arcrose-clink-src-links-sections.rs","linesOfCode":[{"number":0,"indent":0,"code":"use std::io::BufRead;"},{"number":1,"indent":0,"code":"use errors::{ClinkResult, ClinkError};"},{"number":2,"indent":0,"code":""},{"number":3,"indent":0,"code":"/// Implements parsing functionality that handles extracting information about sections delimited"},{"number":4,"indent":0,"code":"/// by `[clink open]()` and `[clink close]()`."},{"number":5,"indent":0,"code":"pub struct SectionParser<R>"},{"number":6,"indent":1,"code":"    where R: BufRead"},{"number":7,"indent":0,"code":"{"},{"number":8,"indent":1,"code":"    file_path: String,"},{"number":9,"indent":1,"code":"    file_reader: R"},{"number":10,"indent":0,"code":"}"},{"number":11,"indent":0,"code":""},{"number":12,"indent":0,"code":"/// Denotes the location of a section encapsulated by `[clink open]()` and `[clink close]()` delimiters."},{"number":13,"indent":0,"code":"#[derive(Clone, Debug, PartialEq, Eq)]"},{"number":14,"indent":0,"code":"pub struct Section {"},{"number":15,"indent":1,"code":"    pub tags: Vec<String>,"},{"number":16,"indent":1,"code":"    pub file_path: String,"},{"number":17,"indent":1,"code":"    open_line_number: u64,"},{"number":18,"indent":1,"code":"    close_line_number: u64"},{"number":19,"indent":0,"code":"}"},{"number":20,"indent":0,"code":""},{"number":21,"indent":0,"code":"impl<R> SectionParser<R>"},{"number":22,"indent":1,"code":"    where R: BufRead"},{"number":23,"indent":0,"code":"{"},{"number":24,"indent":1,"code":"    /// Construct a new `SectionParser` that will parse a readable source file."},{"number":25,"indent":1,"code":"    pub fn new<T: Into<String>>(path: T, reader: R) -> Self {"},{"number":26,"indent":2,"code":"        SectionParser {"},{"number":27,"indent":3,"code":"            file_path: path.into(),"},{"number":28,"indent":3,"code":"            file_reader: reader"},{"number":29,"indent":2,"code":"        }"},{"number":30,"indent":1,"code":"    }"},{"number":31,"indent":0,"code":""},{"number":32,"indent":1,"code":"    /// Parses the file given to the `SectionParser` into a vector of `Section`s, denoting the"},{"number":33,"indent":1,"code":"    /// location of parts of the file that need to be monitored for changes."},{"number":34,"indent":1,"code":"    ///"},{"number":35,"indent":1,"code":"    /// ## Algorithm Summary"},{"number":36,"indent":1,"code":"    ///"},{"number":37,"indent":1,"code":"    /// 1. Reach each line of the file provided"},{"number":38,"indent":1,"code":"    /// 2. In each line, look for an occurrence of \"[clink open]\""},{"number":39,"indent":1,"code":"    /// 3. When an occurrence is found, create a new `Section` and extract the text between the following parens."},{"number":40,"indent":1,"code":"    ///   1. If there is not a closed pair of parens after \"[clink open]\", return an error."},{"number":41,"indent":1,"code":"    /// 4. Tokenize the text by splitting on \",\" and stripping leading & trailing whitespace from each token."},{"number":42,"indent":1,"code":"    /// 5. Split each token on \"#\" and trim each part. The results are the tags."},{"number":43,"indent":1,"code":"    /// 6. When a \"[clink close]()\" is encountered, terminate the last `Section` and append it to the results."},{"number":44,"indent":1,"code":"    /// 7. Repeat steps 3 to 6 until the file has been completely scanned."},{"number":45,"indent":1,"code":"    ///   1. If there are unterminated `Section`s remaining, return an error."},{"number":46,"indent":1,"code":"    pub fn parse(self) -> ClinkResult<Vec<Section>> {"},{"number":47,"indent":2,"code":"        let mut sections: Vec<Section> = Vec::new();"},{"number":48,"indent":2,"code":"        let mut stack: Vec<Section> = Vec::new();"},{"number":49,"indent":2,"code":"        for (line_num, line) in self.file_reader.lines().enumerate() {"},{"number":50,"indent":3,"code":"            let line = line?;"},{"number":51,"indent":3,"code":"            let line_num = line_num + 1;"},{"number":52,"indent":3,"code":"            if let Some(open_delim_index) = line.find(\"[clink open]\") {"},{"number":53,"indent":4,"code":"                let offset = open_delim_index + \"[clink open]\".len();"},{"number":54,"indent":4,"code":"                let tags = parse_tags(&line[offset..])?;"},{"number":55,"indent":4,"code":"                if tags.len() == 0 {"},{"number":56,"indent":5,"code":"                    return Err(ClinkError::NoLinkSection(line));"},{"number":57,"indent":4,"code":"                }"},{"number":58,"indent":4,"code":"                let mut new_section = Section::start(self.file_path.clone(), line_num as u64);"},{"number":59,"indent":4,"code":"                new_section.tags.extend_from_slice(&tags);"},{"number":60,"indent":4,"code":"                stack.push(new_section);"},{"number":61,"indent":3,"code":"            }"},{"number":62,"indent":3,"code":"            if let Some(_) = line.find(\"[clink close]()\") {"},{"number":63,"indent":4,"code":"                let mut last_section = stack"},{"number":64,"indent":5,"code":"                    .pop()"},{"number":65,"indent":5,"code":"                    .ok_or(ClinkError::ExtraClose(self.file_path.clone(), line_num))?;"},{"number":66,"indent":4,"code":"                last_section.set_end(line_num as u64);"},{"number":67,"indent":4,"code":"                sections.push(last_section);"},{"number":68,"indent":3,"code":"            }"},{"number":69,"indent":2,"code":"        }"},{"number":70,"indent":2,"code":"        if stack.len() > 0 {"},{"number":71,"indent":3,"code":"            Err(ClinkError::UnclosedSections(self.file_path.clone(), stack.len()))"},{"number":72,"indent":2,"code":"        } else {"},{"number":73,"indent":3,"code":"            Ok(sections)"},{"number":74,"indent":2,"code":"        }"},{"number":75,"indent":1,"code":"    }"},{"number":76,"indent":0,"code":"}"},{"number":77,"indent":0,"code":""},{"number":78,"indent":0,"code":"impl Section {"},{"number":79,"indent":1,"code":"    /// Create a new `Section` that starts on a given line of a file."},{"number":80,"indent":1,"code":"    ///"},{"number":81,"indent":1,"code":"    /// Will be initialized with a closing line number equal to the opening line number and an empty set of links."},{"number":82,"indent":1,"code":"    pub fn start(path: String, open_line_num: u64) -> Section {"},{"number":83,"indent":2,"code":"        Section {"},{"number":84,"indent":3,"code":"            file_path: path,"},{"number":85,"indent":3,"code":"            open_line_number: open_line_num,"},{"number":86,"indent":3,"code":"            close_line_number: open_line_num,"},{"number":87,"indent":3,"code":"            tags: vec![]"},{"number":88,"indent":2,"code":"        }"},{"number":89,"indent":1,"code":"    }"},{"number":90,"indent":0,"code":""},{"number":91,"indent":1,"code":"    /// Sets the line number at which a section ends."},{"number":92,"indent":1,"code":"    pub fn set_end(&mut self, end_line_num: u64) {"},{"number":93,"indent":2,"code":"        self.close_line_number = end_line_num;"},{"number":94,"indent":1,"code":"    }"},{"number":95,"indent":0,"code":""},{"number":96,"indent":1,"code":"    /// Checks if a section contains any of a list of line numbers."},{"number":97,"indent":1,"code":"    pub fn covers_any_line(&self, line_nums: &Vec<u32>) -> bool {"},{"number":98,"indent":2,"code":"        for &line_num in line_nums.iter() {"},{"number":99,"indent":3,"code":"            let line_num = line_num as u64;"},{"number":100,"indent":3,"code":"            if line_num >= self.open_line_number && line_num <= self.close_line_number {"},{"number":101,"indent":4,"code":"                return true;"},{"number":102,"indent":3,"code":"            }"},{"number":103,"indent":2,"code":"        }"},{"number":104,"indent":2,"code":"        false"},{"number":105,"indent":1,"code":"    }"},{"number":106,"indent":0,"code":"}"},{"number":107,"indent":0,"code":""},{"number":108,"indent":0,"code":"/// Parses a tag section containing one or more comma-separated tags."},{"number":109,"indent":0,"code":"///"},{"number":110,"indent":0,"code":"/// # Expected Format"},{"number":111,"indent":0,"code":"///"},{"number":112,"indent":0,"code":"/// ```"},{"number":113,"indent":0,"code":"/// (tag_name[, tag_name[, ...]])"},{"number":114,"indent":0,"code":"/// ```"},{"number":115,"indent":0,"code":"pub fn parse_tags(tag_section: &str) -> ClinkResult<Vec<String>> {"},{"number":116,"indent":1,"code":"    let mut tags : Vec<String> = Vec::new();"},{"number":117,"indent":1,"code":"    let tag_section = tag_section.trim();"},{"number":118,"indent":1,"code":"    let paren_start = tag_section"},{"number":119,"indent":2,"code":"        .find(\"(\")"},{"number":120,"indent":2,"code":"        .ok_or(ClinkError::NoLinkSection(tag_section.to_owned()))?;"},{"number":121,"indent":1,"code":"    let paren_end = tag_section[paren_start + 1..]"},{"number":122,"indent":2,"code":"        .find(\")\")"},{"number":123,"indent":2,"code":"        .ok_or(ClinkError::UnclosedLinkSection(tag_section.to_owned()))?;"},{"number":124,"indent":1,"code":"    let tag_section = &tag_section[paren_start + 1..paren_end+1];"},{"number":125,"indent":1,"code":"    let tag_parts = tag_section"},{"number":126,"indent":2,"code":"        .split(\",\")"},{"number":127,"indent":2,"code":"        .map(str::trim);"},{"number":128,"indent":1,"code":"    for tag in tag_parts {"},{"number":129,"indent":2,"code":"        let tag = tag.trim();"},{"number":130,"indent":2,"code":"        if tag.contains(\" \") || tag.len() == 0 {"},{"number":131,"indent":3,"code":"            return Err(ClinkError::BadTagName(tag.to_owned()));"},{"number":132,"indent":2,"code":"        }"},{"number":133,"indent":2,"code":"        tags.push(tag.to_owned());"},{"number":134,"indent":1,"code":"    }"},{"number":135,"indent":1,"code":"    Ok(tags)"},{"number":136,"indent":0,"code":"}"},{"number":137,"indent":0,"code":""},{"number":138,"indent":0,"code":"#[cfg(test)]"},{"number":139,"indent":0,"code":"mod tests {"},{"number":140,"indent":1,"code":"    use std::io::Cursor;"},{"number":141,"indent":1,"code":"    use super::*;"},{"number":142,"indent":0,"code":""},{"number":143,"indent":1,"code":"    #[test]"},{"number":144,"indent":1,"code":"    fn section_parser_handles_simple_sections() {"},{"number":145,"indent":2,"code":"        let input = \"import os"},{"number":146,"indent":2,"code":"        # [clink open](main)"},{"number":147,"indent":2,"code":"        def show_process():"},{"number":148,"indent":3,"code":"            print os.getpid()"},{"number":149,"indent":2,"code":"        # [clink close]()\";"},{"number":150,"indent":2,"code":"        let expected_sections = vec!["},{"number":151,"indent":3,"code":"            Section {"},{"number":152,"indent":4,"code":"                open_line_number: 2,"},{"number":153,"indent":4,"code":"                close_line_number: 5,"},{"number":154,"indent":4,"code":"                file_path: \"/process.py\".to_owned(),"},{"number":155,"indent":4,"code":"                tags: vec![\"main\".to_owned()]"},{"number":156,"indent":3,"code":"            }"},{"number":157,"indent":2,"code":"        ];"},{"number":158,"indent":2,"code":"        let parser = SectionParser::new(\"/process.py\", Cursor::new(input));"},{"number":159,"indent":2,"code":"        let sections_found = parser.parse().unwrap();"},{"number":160,"indent":2,"code":"        assert_eq!(sections_found.len(), expected_sections.len());"},{"number":161,"indent":2,"code":"        assert_eq!(sections_found[0], expected_sections[0]);"},{"number":162,"indent":1,"code":"    }"},{"number":163,"indent":0,"code":""},{"number":164,"indent":1,"code":"    #[test]"},{"number":165,"indent":1,"code":"    fn section_parser_handles_nested_sections() {"},{"number":166,"indent":2,"code":"        let input = \"// [clink open](test)"},{"number":167,"indent":2,"code":"        fn test() {"},{"number":168,"indent":3,"code":"            // [clink open](logger)"},{"number":169,"indent":3,"code":"            println!(\\\"hello\\\");"},{"number":170,"indent":3,"code":"            // [clink close]()"},{"number":171,"indent":2,"code":"        }"},{"number":172,"indent":2,"code":"        // [clink close]()\";"},{"number":173,"indent":2,"code":"        let expected_sections = vec!["},{"number":174,"indent":3,"code":"            Section {"},{"number":175,"indent":4,"code":"                open_line_number: 3,"},{"number":176,"indent":4,"code":"                close_line_number: 5,"},{"number":177,"indent":4,"code":"                file_path: \"/src/main.rs\".to_owned(),"},{"number":178,"indent":4,"code":"                tags: vec![\"logger\".to_owned()]"},{"number":179,"indent":3,"code":"            },"},{"number":180,"indent":3,"code":"            Section {"},{"number":181,"indent":4,"code":"                open_line_number: 1,"},{"number":182,"indent":4,"code":"                close_line_number: 7,"},{"number":183,"indent":4,"code":"                file_path: \"/src/main.rs\".to_owned(),"},{"number":184,"indent":4,"code":"                tags: vec![\"test\".to_owned()]"},{"number":185,"indent":3,"code":"            },"},{"number":186,"indent":2,"code":"        ];"},{"number":187,"indent":2,"code":"        let parser = SectionParser::new(\"/src/main.rs\", Cursor::new(input));"},{"number":188,"indent":2,"code":"        let sections_found = parser.parse().unwrap();"},{"number":189,"indent":2,"code":"        assert_eq!(sections_found.len(), expected_sections.len());"},{"number":190,"indent":2,"code":"        assert_eq!(sections_found[0], expected_sections[0]);"},{"number":191,"indent":2,"code":"        assert_eq!(sections_found[1], expected_sections[1]);"},{"number":192,"indent":1,"code":"    }"},{"number":193,"indent":0,"code":""},{"number":194,"indent":1,"code":"    #[test]"},{"number":195,"indent":1,"code":"    fn section_parser_handles_multiple_links() {"},{"number":196,"indent":2,"code":"        let input = \"// [clink open](logger)"},{"number":197,"indent":2,"code":"        println!(\\\"hello\\\");"},{"number":198,"indent":2,"code":"        // [clink close]()\";"},{"number":199,"indent":2,"code":"        let expected_sections = vec!["},{"number":200,"indent":3,"code":"            Section {"},{"number":201,"indent":4,"code":"                open_line_number: 1,"},{"number":202,"indent":4,"code":"                close_line_number: 3,"},{"number":203,"indent":4,"code":"                file_path: \"/tests/mod.rs\".to_owned(),"},{"number":204,"indent":4,"code":"                tags: vec![\"logger\".to_owned()]"},{"number":205,"indent":3,"code":"            }"},{"number":206,"indent":2,"code":"        ];"},{"number":207,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":208,"indent":2,"code":"        let sections_found = parser.parse().unwrap();"},{"number":209,"indent":2,"code":"        assert_eq!(sections_found.len(), expected_sections.len());"},{"number":210,"indent":2,"code":"        assert_eq!(sections_found[0], expected_sections[0]);"},{"number":211,"indent":1,"code":"    }"},{"number":212,"indent":0,"code":""},{"number":213,"indent":1,"code":"    #[test]"},{"number":214,"indent":1,"code":"    fn section_parser_errors_on_missing_links() {"},{"number":215,"indent":2,"code":"        let input = \"## [clink open]()"},{"number":216,"indent":2,"code":"        # [clink close]()\";"},{"number":217,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":218,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":219,"indent":1,"code":"    }"},{"number":220,"indent":0,"code":""},{"number":221,"indent":1,"code":"    #[test]"},{"number":222,"indent":1,"code":"    fn section_parser_errors_on_malformed_links() {"},{"number":223,"indent":2,"code":"        let input = \"// [clink open](/src/main.rs#logger one)"},{"number":224,"indent":2,"code":"        // [clink close]()\";"},{"number":225,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":226,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":227,"indent":1,"code":"    }"},{"number":228,"indent":0,"code":""},{"number":229,"indent":1,"code":"    #[test]"},{"number":230,"indent":1,"code":"    fn section_parser_errors_on_unclosed_parens() {"},{"number":231,"indent":2,"code":"        let input = \"// [clink open](/src/main.rs#logger"},{"number":232,"indent":2,"code":"        println!(\\\"hello\\\");"},{"number":233,"indent":2,"code":"        // [clink close]()\";"},{"number":234,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":235,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":236,"indent":1,"code":"    }"},{"number":237,"indent":0,"code":""},{"number":238,"indent":1,"code":"    #[test]"},{"number":239,"indent":1,"code":"    fn section_parser_error_on_unclosed_delimiters() {"},{"number":240,"indent":2,"code":"        // notice: click close instead of clink close"},{"number":241,"indent":2,"code":"        let input = \"// [clink open](/src/main.rs)"},{"number":242,"indent":2,"code":"        // [click close]()\";"},{"number":243,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":244,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":245,"indent":1,"code":"    }"},{"number":246,"indent":0,"code":""},{"number":247,"indent":1,"code":"    #[test]"},{"number":248,"indent":1,"code":"    fn section_parser_skips_malformed_delimiters() {"},{"number":249,"indent":2,"code":"        // notice: click instead of clink"},{"number":250,"indent":2,"code":"        let input = \"// [click open](/hello.py)"},{"number":251,"indent":2,"code":"        // [clink close]()\";"},{"number":252,"indent":2,"code":"        let parser = SectionParser::new(\"/tests/mod.rs\", Cursor::new(input));"},{"number":253,"indent":2,"code":"        assert!(parser.parse().is_err());"},{"number":254,"indent":1,"code":"    }"},{"number":255,"indent":0,"code":"}"}]},{"fileName":"arcrose-tegami-src-environment-mod.rs","linesOfCode":[{"number":0,"indent":0,"code":"//! `Environment` is this crate's main driver.  It facilitates all of the"},{"number":1,"indent":0,"code":"//! communication between a main application and its dependency applications."},{"number":2,"indent":0,"code":""},{"number":3,"indent":0,"code":"use std::collections::{HashMap, VecDeque};"},{"number":4,"indent":0,"code":"use std::time;"},{"number":5,"indent":0,"code":""},{"number":6,"indent":0,"code":"use application::{Application, Init, Update};"},{"number":7,"indent":0,"code":"use ident::{Id, Pid};"},{"number":8,"indent":0,"code":"use message::Message;"},{"number":9,"indent":0,"code":""},{"number":10,"indent":0,"code":"const ASYNC_WAIT_TIME_NANOSECONDS: u32 = 10_000_000;"},{"number":11,"indent":0,"code":""},{"number":12,"indent":0,"code":"/// Manages the state of an application and facilitates message passing between"},{"number":13,"indent":0,"code":"/// it and dependent applications."},{"number":14,"indent":0,"code":"/// "},{"number":15,"indent":0,"code":"/// `Environment` also automatically polls applications for completed"},{"number":16,"indent":0,"code":"/// asynchronous work by sending them an `async-check` message that contains no"},{"number":17,"indent":0,"code":"/// data.  An application's `update` method can respond to these messages"},{"number":18,"indent":0,"code":"/// with `Update::NotReady` to indicate that their asynchronous task is not yet"},{"number":19,"indent":0,"code":"/// complete."},{"number":20,"indent":0,"code":"///"},{"number":21,"indent":0,"code":"/// `Environment` also responds to messages with the identifier"},{"number":22,"indent":0,"code":"/// `\"request-dependency\"` and associated data of type `RequestDependency` with"},{"number":23,"indent":0,"code":"/// a `\"dependency-lookup\"` with associated data of type `DependencyLookup`."},{"number":24,"indent":0,"code":"pub struct Environment<App> {"},{"number":25,"indent":1,"code":"    application: App,"},{"number":26,"indent":1,"code":"    application_id_to_pid: HashMap<Id, Pid>,"},{"number":27,"indent":1,"code":"    other_applications: HashMap<Pid, Box<Application>>,"},{"number":28,"indent":1,"code":"    mailbox: VecDeque<Message>,"},{"number":29,"indent":1,"code":"    async_tracker: HashMap<Pid, AsyncPollState>,"},{"number":30,"indent":0,"code":"}"},{"number":31,"indent":0,"code":""},{"number":32,"indent":0,"code":"/// A builder to configure new `Environment`s."},{"number":33,"indent":0,"code":"pub struct EnvironmentBuilder<App> {"},{"number":34,"indent":1,"code":"    application: App,"},{"number":35,"indent":1,"code":"    dependencies: Vec<(Id, Box<Application>)>,"},{"number":36,"indent":0,"code":"}"},{"number":37,"indent":0,"code":""},{"number":38,"indent":0,"code":"/// Represents each of the states that an application can be in with regards"},{"number":39,"indent":0,"code":"/// to completing an asynchronous task, from the perspective of an"},{"number":40,"indent":0,"code":"/// `Environment`."},{"number":41,"indent":0,"code":"///"},{"number":42,"indent":0,"code":"/// An application that is `NotPinged` will be scheduled to have an"},{"number":43,"indent":0,"code":"/// `async-check` sent to it as soon as possible and move into `WasPinged`."},{"number":44,"indent":0,"code":"///"},{"number":45,"indent":0,"code":"/// An application that has indicated it is `Update::NotReady` in response to"},{"number":46,"indent":0,"code":"/// an `async-check` will be moved into a the `Waiting` state.  While in the"},{"number":47,"indent":0,"code":"/// `Waiting` state for some period of time or in the `WasPinged` state,"},{"number":48,"indent":0,"code":"/// the `Environment` will not continue to send `async-check` to an application."},{"number":49,"indent":0,"code":"#[derive(Debug)]"},{"number":50,"indent":0,"code":"enum AsyncPollState {"},{"number":51,"indent":1,"code":"    NotPinged,"},{"number":52,"indent":1,"code":"    WasPinged,"},{"number":53,"indent":1,"code":"    Waiting {"},{"number":54,"indent":2,"code":"        last_ping: time::Instant,"},{"number":55,"indent":2,"code":"        wait: time::Duration,"},{"number":56,"indent":1,"code":"    }"},{"number":57,"indent":0,"code":"}"},{"number":58,"indent":0,"code":""},{"number":59,"indent":0,"code":"/// The data type for a `request-dependency` message sent to an `Environment`."},{"number":60,"indent":0,"code":"///"},{"number":61,"indent":0,"code":"/// `request-dependency` can be sent to an `Environment` to get the `Pid` of a"},{"number":62,"indent":0,"code":"/// dependency application registered with a gven identifier as a `String`."},{"number":63,"indent":0,"code":"#[derive(Serialize, Deserialize)]"},{"number":64,"indent":0,"code":"pub struct RequestDependency {"},{"number":65,"indent":1,"code":"    pub id: String,"},{"number":66,"indent":0,"code":"}"},{"number":67,"indent":0,"code":""},{"number":68,"indent":0,"code":"/// The data type for a `dependency-lookup` message sent in response to a"},{"number":69,"indent":0,"code":"/// `request-dependency` message to an `Environment`."},{"number":70,"indent":0,"code":"///"},{"number":71,"indent":0,"code":"/// It contains the identifier of the dependency queried and, if such a "},{"number":72,"indent":0,"code":"/// dependency exists, the `Pid` that messages can be sent to in order to"},{"number":73,"indent":0,"code":"/// communicate with it."},{"number":74,"indent":0,"code":"#[derive(Serialize, Deserialize)]"},{"number":75,"indent":0,"code":"pub struct DependencyLookup {"},{"number":76,"indent":1,"code":"    pub id: String,"},{"number":77,"indent":1,"code":"    pub pid: Option<Pid>,"},{"number":78,"indent":0,"code":"}"},{"number":79,"indent":0,"code":""},{"number":80,"indent":0,"code":""},{"number":81,"indent":0,"code":"impl<App: Application> EnvironmentBuilder<App> {"},{"number":82,"indent":1,"code":"    /// Construct a new `EnvironmentBuilder` to configure an `Environment` that"},{"number":83,"indent":1,"code":"    /// will run `app` as the main application."},{"number":84,"indent":1,"code":"    pub fn new(app: App) -> Self {"},{"number":85,"indent":2,"code":"        EnvironmentBuilder {"},{"number":86,"indent":3,"code":"            application: app,"},{"number":87,"indent":3,"code":"            dependencies: vec![],"},{"number":88,"indent":2,"code":"        }"},{"number":89,"indent":1,"code":"    }"},{"number":90,"indent":0,"code":""},{"number":91,"indent":1,"code":"    /// Register a new dependency application with a given identifier."},{"number":92,"indent":1,"code":"    pub fn dep<I: Into<Id>>(mut self, identifier: I, app: Box<Application>) -> Self {"},{"number":93,"indent":2,"code":"        self.dependencies.push( (identifier.into(), app) );"},{"number":94,"indent":2,"code":"        self"},{"number":95,"indent":1,"code":"    }"},{"number":96,"indent":0,"code":""},{"number":97,"indent":1,"code":"    /// Finalize the construction of the `Environment`."},{"number":98,"indent":1,"code":"    pub fn build(self) -> Environment<App> {"},{"number":99,"indent":2,"code":"        Environment::new(self.application, self.dependencies)"},{"number":100,"indent":1,"code":"    }"},{"number":101,"indent":0,"code":"}"},{"number":102,"indent":0,"code":""},{"number":103,"indent":0,"code":""},{"number":104,"indent":0,"code":"impl<App: Application> Environment<App> {"},{"number":105,"indent":1,"code":"    /// Constructs a new `Environment` with a main application and collection of"},{"number":106,"indent":1,"code":"    /// registered dependencies."},{"number":107,"indent":1,"code":"    fn new(app: App, deps: Vec<(Id, Box<Application>)>) -> Self {"},{"number":108,"indent":2,"code":"        let map: HashMap<Id, Pid> = deps"},{"number":109,"indent":3,"code":"            .iter()"},{"number":110,"indent":3,"code":"            .enumerate()"},{"number":111,"indent":3,"code":"            .map(|(index, &(ref id, _))| (id.clone(), Pid(3 + index as u64)))"},{"number":112,"indent":3,"code":"            .collect();"},{"number":113,"indent":0,"code":""},{"number":114,"indent":2,"code":"        let deps: HashMap<Pid, Box<Application>> = deps"},{"number":115,"indent":3,"code":"            .into_iter()"},{"number":116,"indent":3,"code":"            .enumerate()"},{"number":117,"indent":3,"code":"            .map(|(index, (_, app))| (Pid( 3 + index as u64 ), app))"},{"number":118,"indent":3,"code":"            .collect();"},{"number":119,"indent":2,"code":"        "},{"number":120,"indent":2,"code":"        let mut trackers: HashMap<Pid, AsyncPollState> = HashMap::new();"},{"number":121,"indent":0,"code":""},{"number":122,"indent":2,"code":"        for (&pid, _) in deps.iter() {"},{"number":123,"indent":3,"code":"            trackers.insert(pid, AsyncPollState::NotPinged);"},{"number":124,"indent":2,"code":"        }"},{"number":125,"indent":0,"code":""},{"number":126,"indent":2,"code":"        trackers.insert(Pid::app(), AsyncPollState::NotPinged);"},{"number":127,"indent":0,"code":""},{"number":128,"indent":2,"code":"        Environment {"},{"number":129,"indent":3,"code":"            application: app,"},{"number":130,"indent":3,"code":"            application_id_to_pid: map,"},{"number":131,"indent":3,"code":"            other_applications: deps,"},{"number":132,"indent":3,"code":"            mailbox: VecDeque::new(),"},{"number":133,"indent":3,"code":"            async_tracker: trackers,"},{"number":134,"indent":2,"code":"        }"},{"number":135,"indent":1,"code":"    }"},{"number":136,"indent":0,"code":""},{"number":137,"indent":1,"code":"    /// Execute the `Environment`'s main application until it terminates by"},{"number":138,"indent":1,"code":"    /// returning an error.  Returns the final state of the main application"},{"number":139,"indent":1,"code":"    /// along with the error."},{"number":140,"indent":1,"code":"    ///"},{"number":141,"indent":1,"code":"    /// This function will block the current thread until completion."},{"number":142,"indent":1,"code":"    pub fn start(mut self) -> (App, Box<::std::error::Error>) {"},{"number":143,"indent":2,"code":"        if let Init::Messages(mut init_msgs) = self.init() {"},{"number":144,"indent":3,"code":"            for msg in init_msgs.iter_mut() {"},{"number":145,"indent":4,"code":"                msg.sender = Pid::env();"},{"number":146,"indent":0,"code":""},{"number":147,"indent":4,"code":"                if msg.recipient == Pid::me() {"},{"number":148,"indent":5,"code":"                    msg.recipient = Pid::env();"},{"number":149,"indent":4,"code":"                }"},{"number":150,"indent":3,"code":"            }"},{"number":151,"indent":0,"code":""},{"number":152,"indent":3,"code":"            self.mailbox.extend(init_msgs);"},{"number":153,"indent":2,"code":"        }"},{"number":154,"indent":0,"code":""},{"number":155,"indent":2,"code":"        if let Init::Messages(mut init_msgs) = self.application.init() {"},{"number":156,"indent":3,"code":"            for msg in init_msgs.iter_mut() {"},{"number":157,"indent":4,"code":"                msg.sender = Pid::app();"},{"number":158,"indent":0,"code":""},{"number":159,"indent":4,"code":"                if msg.recipient == Pid::me() {"},{"number":160,"indent":5,"code":"                    msg.recipient = Pid::app();"},{"number":161,"indent":4,"code":"                }"},{"number":162,"indent":3,"code":"            }"},{"number":163,"indent":0,"code":""},{"number":164,"indent":3,"code":"            self.mailbox.extend(init_msgs);"},{"number":165,"indent":2,"code":"        }"},{"number":166,"indent":0,"code":""},{"number":167,"indent":2,"code":"        for (&id, dep) in self.other_applications.iter_mut() {"},{"number":168,"indent":3,"code":"            if let Init::Messages(mut init_msgs) = dep.init() {"},{"number":169,"indent":4,"code":"                for msg in init_msgs.iter_mut() {"},{"number":170,"indent":5,"code":"                    msg.sender = id;"},{"number":171,"indent":0,"code":""},{"number":172,"indent":5,"code":"                    if msg.recipient == Pid::me() {"},{"number":173,"indent":6,"code":"                        msg.recipient = id;"},{"number":174,"indent":5,"code":"                    }"},{"number":175,"indent":4,"code":"                }"},{"number":176,"indent":0,"code":""},{"number":177,"indent":4,"code":"                self.mailbox.extend(init_msgs);"},{"number":178,"indent":3,"code":"            }"},{"number":179,"indent":2,"code":"        }"},{"number":180,"indent":0,"code":""},{"number":181,"indent":2,"code":"        'readmsg: loop {"},{"number":182,"indent":3,"code":"            {"},{"number":183,"indent":4,"code":"                let msgs = self.check_for_completed_async_work();"},{"number":184,"indent":4,"code":"                self.mailbox.extend(msgs);"},{"number":185,"indent":3,"code":"            }"},{"number":186,"indent":0,"code":""},{"number":187,"indent":3,"code":"            if let Some(inbound_msg) = self.mailbox.pop_front() {"},{"number":188,"indent":4,"code":"                let sender = inbound_msg.sender;"},{"number":189,"indent":4,"code":"                let recipient = inbound_msg.recipient;"},{"number":190,"indent":4,"code":"                let msg_is_ping = inbound_msg.id.as_str() == \"async-check\";"},{"number":191,"indent":0,"code":""},{"number":192,"indent":4,"code":"                let update = self.other_applications.get_mut(&recipient)"},{"number":193,"indent":5,"code":"                    .map(|dep| dep.update(inbound_msg.clone()))"},{"number":194,"indent":5,"code":"                    .unwrap_or_else(||"},{"number":195,"indent":6,"code":"                        if recipient == Pid::app() {"},{"number":196,"indent":7,"code":"                            self.application.update(inbound_msg)"},{"number":197,"indent":6,"code":"                        } else if recipient == Pid::env() {"},{"number":198,"indent":7,"code":"                            self.update(inbound_msg)"},{"number":199,"indent":6,"code":"                        } else {"},{"number":200,"indent":7,"code":"                            Update::NoMessages"},{"number":201,"indent":6,"code":"                        });"},{"number":202,"indent":0,"code":""},{"number":203,"indent":4,"code":"                match update {"},{"number":204,"indent":5,"code":"                    Update::Messages(mut msgs) => {"},{"number":205,"indent":6,"code":"                        if msg_is_ping {"},{"number":206,"indent":7,"code":"                            self.set_app_async_state(&recipient, AsyncPollState::NotPinged);"},{"number":207,"indent":6,"code":"                        }"},{"number":208,"indent":0,"code":""},{"number":209,"indent":6,"code":"                        for msg in msgs.iter_mut() {"},{"number":210,"indent":7,"code":"                            msg.sender = recipient;"},{"number":211,"indent":0,"code":""},{"number":212,"indent":7,"code":"                            if msg.recipient == Pid::me() {"},{"number":213,"indent":8,"code":"                                msg.recipient = sender;"},{"number":214,"indent":7,"code":"                            }"},{"number":215,"indent":6,"code":"                        }"},{"number":216,"indent":6,"code":"                        "},{"number":217,"indent":6,"code":"                        self.mailbox.extend(msgs);"},{"number":218,"indent":5,"code":"                    },"},{"number":219,"indent":0,"code":""},{"number":220,"indent":5,"code":"                    Update::NotReady => {"},{"number":221,"indent":6,"code":"                        self.set_app_async_state(&recipient, AsyncPollState::Waiting {"},{"number":222,"indent":7,"code":"                            last_ping: time::Instant::now(),"},{"number":223,"indent":7,"code":"                            wait: time::Duration::new(0, ASYNC_WAIT_TIME_NANOSECONDS),"},{"number":224,"indent":6,"code":"                        });"},{"number":225,"indent":5,"code":"                    },"},{"number":226,"indent":0,"code":""},{"number":227,"indent":5,"code":"                    Update::Error(err) => {"},{"number":228,"indent":6,"code":"                        println!(\"ERROR: {}\", err);"},{"number":229,"indent":6,"code":"                        return (self.application, err);"},{"number":230,"indent":5,"code":"                    },"},{"number":231,"indent":0,"code":""},{"number":232,"indent":5,"code":"                    _ => {"},{"number":233,"indent":6,"code":"                        if msg_is_ping {"},{"number":234,"indent":7,"code":"                            self.set_app_async_state(&recipient, AsyncPollState::NotPinged);"},{"number":235,"indent":6,"code":"                        }"},{"number":236,"indent":5,"code":"                    },"},{"number":237,"indent":4,"code":"                }"},{"number":238,"indent":3,"code":"            } else {"},{"number":239,"indent":4,"code":"                // Didnt' read a message."},{"number":240,"indent":4,"code":"                ::std::thread::sleep(time::Duration::new(0, ASYNC_WAIT_TIME_NANOSECONDS));"},{"number":241,"indent":3,"code":"            }"},{"number":242,"indent":2,"code":"        }"},{"number":243,"indent":1,"code":"    }"},{"number":244,"indent":0,"code":""},{"number":245,"indent":1,"code":"    fn set_app_async_state(&mut self, process: &Pid, state: AsyncPollState) {"},{"number":246,"indent":2,"code":"        if let Some(async_status) = self.async_tracker.get_mut(process) {"},{"number":247,"indent":3,"code":"            *async_status = state;"},{"number":248,"indent":2,"code":"        }"},{"number":249,"indent":1,"code":"    }"},{"number":250,"indent":0,"code":""},{"number":251,"indent":1,"code":"    /// Inspects the async. state of each application to determine which should"},{"number":252,"indent":1,"code":"    /// have an `async-check` sent to them and moves each async. state forward"},{"number":253,"indent":1,"code":"    /// where appropriate."},{"number":254,"indent":1,"code":"    fn check_for_completed_async_work(&mut self) -> Vec<Message> {"},{"number":255,"indent":2,"code":"        let mut messages = Vec::new();"},{"number":256,"indent":1,"code":"    "},{"number":257,"indent":2,"code":"        for (&pid, async_status) in self.async_tracker.iter_mut() {"},{"number":258,"indent":3,"code":"            let (next_state, should_msg) = match *async_status {"},{"number":259,"indent":4,"code":"                AsyncPollState::NotPinged =>"},{"number":260,"indent":5,"code":"                    (AsyncPollState::WasPinged, true),"},{"number":261,"indent":0,"code":""},{"number":262,"indent":4,"code":"                AsyncPollState::WasPinged =>"},{"number":263,"indent":5,"code":"                    (AsyncPollState::WasPinged, false),"},{"number":264,"indent":0,"code":""},{"number":265,"indent":4,"code":"                AsyncPollState::Waiting{ last_ping, wait } => {"},{"number":266,"indent":5,"code":"                    let since_ping = last_ping.elapsed();"},{"number":267,"indent":0,"code":""},{"number":268,"indent":5,"code":"                    let state = match since_ping > wait {"},{"number":269,"indent":6,"code":"                        true  => AsyncPollState::NotPinged,"},{"number":270,"indent":6,"code":"                        false => AsyncPollState::Waiting{ last_ping, wait },"},{"number":271,"indent":5,"code":"                    };"},{"number":272,"indent":0,"code":""},{"number":273,"indent":5,"code":"                    (state, false)"},{"number":274,"indent":4,"code":"                },"},{"number":275,"indent":3,"code":"            };"},{"number":276,"indent":0,"code":""},{"number":277,"indent":3,"code":"            if should_msg {"},{"number":278,"indent":4,"code":"                messages.push(Message::empty(pid, \"async-check\"));"},{"number":279,"indent":3,"code":"            }"},{"number":280,"indent":0,"code":""},{"number":281,"indent":3,"code":"            *async_status = next_state;"},{"number":282,"indent":2,"code":"        }"},{"number":283,"indent":0,"code":""},{"number":284,"indent":2,"code":"        messages"},{"number":285,"indent":1,"code":"    }"},{"number":286,"indent":0,"code":"}"},{"number":287,"indent":0,"code":""},{"number":288,"indent":0,"code":""},{"number":289,"indent":0,"code":"impl<App: Application> Application for Environment<App> {"},{"number":290,"indent":1,"code":"    fn init(&mut self) -> Init {"},{"number":291,"indent":2,"code":"        Init::Messages(vec!["},{"number":292,"indent":3,"code":"            Message::new(Pid::app(), \"dependencies\", &self.application_id_to_pid),"},{"number":293,"indent":2,"code":"        ])"},{"number":294,"indent":1,"code":"    }"},{"number":295,"indent":0,"code":""},{"number":296,"indent":1,"code":"    fn update(&mut self, msg: Message) -> Update {"},{"number":297,"indent":2,"code":"        let mut messages = Vec::new();"},{"number":298,"indent":0,"code":""},{"number":299,"indent":2,"code":"        if msg.id.as_str()  == \"request-dependency\" {"},{"number":300,"indent":3,"code":"            let lookup_result = msg.get_data::<RequestDependency>()"},{"number":301,"indent":4,"code":"                .ok()"},{"number":302,"indent":4,"code":"                .map(|request| {"},{"number":303,"indent":5,"code":"                    let id = Id::new(request.id);"},{"number":304,"indent":0,"code":""},{"number":305,"indent":5,"code":"                    self.application_id_to_pid"},{"number":306,"indent":6,"code":"                        .get(&id)"},{"number":307,"indent":6,"code":"                        .map(Clone::clone)"},{"number":308,"indent":6,"code":"                        .map(|pid| (id.clone(), Some(pid)))"},{"number":309,"indent":6,"code":"                        .unwrap_or((id.clone(), None))"},{"number":310,"indent":4,"code":"                });"},{"number":311,"indent":0,"code":""},{"number":312,"indent":3,"code":"            match lookup_result {"},{"number":313,"indent":4,"code":"                Some((id, Some(pid))) =>"},{"number":314,"indent":5,"code":"                    messages.push(Message::new(msg.sender, \"dependency-lookup\", DependencyLookup {"},{"number":315,"indent":6,"code":"                        id: id.0,"},{"number":316,"indent":6,"code":"                        pid: Some(pid),"},{"number":317,"indent":5,"code":"                    })),"},{"number":318,"indent":0,"code":""},{"number":319,"indent":4,"code":"                Some((id, None)) =>"},{"number":320,"indent":5,"code":"                    messages.push(Message::new(msg.sender, \"dependency-lookup\", DependencyLookup {"},{"number":321,"indent":6,"code":"                        id: id.0,"},{"number":322,"indent":6,"code":"                        pid: None,"},{"number":323,"indent":5,"code":"                    })),"},{"number":324,"indent":0,"code":""},{"number":325,"indent":4,"code":"                None =>"},{"number":326,"indent":5,"code":"                    (),"},{"number":327,"indent":3,"code":"            };"},{"number":328,"indent":2,"code":"        }"},{"number":329,"indent":0,"code":""},{"number":330,"indent":2,"code":"        Update::Messages(messages)"},{"number":331,"indent":1,"code":"    }"},{"number":332,"indent":0,"code":"}"},{"number":333,"indent":0,"code":""}]}]},{"languageName":"go","sourceFiles":[{"fileName":"arcrose-patches-internal-server-jobs.go","linesOfCode":[{"number":0,"indent":0,"code":"package servers"},{"number":1,"indent":0,"code":""},{"number":2,"indent":0,"code":"import ("},{"number":3,"indent":1,"code":"\t\"crypto/rand\""},{"number":4,"indent":1,"code":"\t\"encoding/hex\""},{"number":5,"indent":1,"code":"\t\"fmt\""},{"number":6,"indent":1,"code":"\t\"time\""},{"number":7,"indent":0,"code":""},{"number":8,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/vulnerability\""},{"number":9,"indent":0,"code":")"},{"number":10,"indent":0,"code":""},{"number":11,"indent":0,"code":"var defaultReadTimeout time.Duration = 30 * time.Millisecond"},{"number":12,"indent":0,"code":""},{"number":13,"indent":0,"code":"var errNoSuchJob = \"no such job\""},{"number":14,"indent":0,"code":""},{"number":15,"indent":0,"code":"const ("},{"number":16,"indent":1,"code":"\tdefaultMaxJobs uint = 128"},{"number":17,"indent":0,"code":""},{"number":18,"indent":1,"code":"\tnumJobIDBytes uint = 16"},{"number":19,"indent":0,"code":")"},{"number":20,"indent":0,"code":""},{"number":21,"indent":0,"code":"type complete bool"},{"number":22,"indent":0,"code":""},{"number":23,"indent":0,"code":"// VulnJobManager manages \"jobs\" containing channels from which vulnerabilities"},{"number":24,"indent":0,"code":"// are read."},{"number":25,"indent":0,"code":"type VulnJobManager struct {"},{"number":26,"indent":1,"code":"\tmanaging    map[string]vulnerability.Job"},{"number":27,"indent":1,"code":"\tnumManaged  uint"},{"number":28,"indent":1,"code":"\tmaxJobs     uint"},{"number":29,"indent":1,"code":"\tmaxReadTime time.Duration"},{"number":30,"indent":0,"code":"}"},{"number":31,"indent":0,"code":""},{"number":32,"indent":0,"code":"// VulnJobManagerOptions are optional configuration parameters for VulnJobManager."},{"number":33,"indent":0,"code":"type VulnJobManagerOptions struct {"},{"number":34,"indent":1,"code":"\tMaxJobs     uint"},{"number":35,"indent":1,"code":"\tReadTimeout time.Duration"},{"number":36,"indent":0,"code":"}"},{"number":37,"indent":0,"code":""},{"number":38,"indent":0,"code":"// NewVulnJobManager constructs a new VulnJobManager."},{"number":39,"indent":0,"code":"func NewVulnJobManager(opts VulnJobManagerOptions) VulnJobManager {"},{"number":40,"indent":1,"code":"\topts.applyDefaults()"},{"number":41,"indent":1,"code":"\treturn VulnJobManager{"},{"number":42,"indent":2,"code":"\t\tmanaging:    make(map[string]vulnerability.Job),"},{"number":43,"indent":2,"code":"\t\tnumManaged:  0,"},{"number":44,"indent":2,"code":"\t\tmaxJobs:     opts.MaxJobs,"},{"number":45,"indent":2,"code":"\t\tmaxReadTime: opts.ReadTimeout,"},{"number":46,"indent":1,"code":"\t}"},{"number":47,"indent":0,"code":"}"},{"number":48,"indent":0,"code":""},{"number":49,"indent":0,"code":"// Register attempts to add a new job to the manager, returning an ID that"},{"number":50,"indent":0,"code":"// must be provided during lookups."},{"number":51,"indent":0,"code":"func (jobs *VulnJobManager) Register(job vulnerability.Job) (string, error) {"},{"number":52,"indent":1,"code":"\tif jobs.numManaged >= jobs.maxJobs {"},{"number":53,"indent":2,"code":"\t\treturn \"\", fmt.Errorf(\"job queue full; try again later\")"},{"number":54,"indent":1,"code":"\t}"},{"number":55,"indent":0,"code":""},{"number":56,"indent":1,"code":"\tnewID := generateID(numJobIDBytes, func(id string) bool {"},{"number":57,"indent":2,"code":"\t\t_, found := jobs.managing[id]"},{"number":58,"indent":2,"code":"\t\treturn !found"},{"number":59,"indent":1,"code":"\t})"},{"number":60,"indent":0,"code":""},{"number":61,"indent":1,"code":"\tjobs.managing[newID] = job"},{"number":62,"indent":1,"code":"\tjobs.numManaged++"},{"number":63,"indent":1,"code":"\treturn newID, nil"},{"number":64,"indent":0,"code":"}"},{"number":65,"indent":0,"code":""},{"number":66,"indent":0,"code":"// Retrieve finds a job being handled by the manager and reads results from it."},{"number":67,"indent":0,"code":"func (jobs *VulnJobManager) Retrieve(jobID string) ("},{"number":68,"indent":1,"code":"\t[]vulnerability.Vulnerability,"},{"number":69,"indent":1,"code":"\t[]error,"},{"number":70,"indent":1,"code":"\tcomplete,"},{"number":71,"indent":0,"code":") {"},{"number":72,"indent":1,"code":"\tjob, found := jobs.managing[jobID]"},{"number":73,"indent":1,"code":"\tvulns := []vulnerability.Vulnerability{}"},{"number":74,"indent":1,"code":"\terrs := []error{}"},{"number":75,"indent":1,"code":"\tfin := complete(false)"},{"number":76,"indent":0,"code":""},{"number":77,"indent":1,"code":"\tif !found {"},{"number":78,"indent":2,"code":"\t\treturn []vulnerability.Vulnerability{}, []error{fmt.Errorf(errNoSuchJob)}, fin"},{"number":79,"indent":1,"code":"\t}"},{"number":80,"indent":0,"code":""},{"number":81,"indent":1,"code":"\tstopAt := time.Now().Add(jobs.maxReadTime)"},{"number":82,"indent":0,"code":""},{"number":83,"indent":0,"code":"readUntilTimeout:"},{"number":84,"indent":1,"code":"\tfor {"},{"number":85,"indent":2,"code":"\t\ttimeLeft := time.Until(stopAt)"},{"number":86,"indent":2,"code":"\t\tselect {"},{"number":87,"indent":2,"code":"\t\tcase <-time.After(timeLeft):"},{"number":88,"indent":3,"code":"\t\t\tbreak readUntilTimeout"},{"number":89,"indent":0,"code":""},{"number":90,"indent":2,"code":"\t\tcase <-job.Finished:"},{"number":91,"indent":3,"code":"\t\t\tdelete(jobs.managing, jobID)"},{"number":92,"indent":3,"code":"\t\t\tjobs.numManaged--"},{"number":93,"indent":3,"code":"\t\t\tfin = complete(true)"},{"number":94,"indent":3,"code":"\t\t\tbreak readUntilTimeout"},{"number":95,"indent":0,"code":""},{"number":96,"indent":2,"code":"\t\tcase err := <-job.Errors:"},{"number":97,"indent":3,"code":"\t\t\terrs = append(errs, err)"},{"number":98,"indent":0,"code":""},{"number":99,"indent":2,"code":"\t\tcase vuln := <-job.Vulns:"},{"number":100,"indent":3,"code":"\t\t\tvulns = append(vulns, vuln)"},{"number":101,"indent":2,"code":"\t\t}"},{"number":102,"indent":1,"code":"\t}"},{"number":103,"indent":0,"code":""},{"number":104,"indent":1,"code":"\treturn vulns, errs, fin"},{"number":105,"indent":0,"code":"}"},{"number":106,"indent":0,"code":""},{"number":107,"indent":0,"code":"func (opts *VulnJobManagerOptions) applyDefaults() {"},{"number":108,"indent":1,"code":"\tif opts.MaxJobs == 0 {"},{"number":109,"indent":2,"code":"\t\topts.MaxJobs = defaultMaxJobs"},{"number":110,"indent":1,"code":"\t}"},{"number":111,"indent":1,"code":"\tif opts.ReadTimeout == 0 {"},{"number":112,"indent":2,"code":"\t\topts.ReadTimeout = defaultReadTimeout"},{"number":113,"indent":1,"code":"\t}"},{"number":114,"indent":0,"code":"}"},{"number":115,"indent":0,"code":""},{"number":116,"indent":0,"code":"func generateID(numBytes uint, unique func(string) bool) string {"},{"number":117,"indent":1,"code":"\tbuffer := make([]byte, numBytes)"},{"number":118,"indent":1,"code":"\tfor {"},{"number":119,"indent":2,"code":"\t\tbytesRead, err := rand.Read(buffer)"},{"number":120,"indent":2,"code":"\t\tif err != nil || bytesRead < 0 || uint(bytesRead) < numBytes {"},{"number":121,"indent":3,"code":"\t\t\tcontinue"},{"number":122,"indent":2,"code":"\t\t}"},{"number":123,"indent":2,"code":"\t\tencoded := hex.EncodeToString(buffer)"},{"number":124,"indent":2,"code":"\t\tif unique(encoded) {"},{"number":125,"indent":3,"code":"\t\t\treturn encoded"},{"number":126,"indent":2,"code":"\t\t}"},{"number":127,"indent":1,"code":"\t}"},{"number":128,"indent":0,"code":"}"},{"number":129,"indent":0,"code":""}]},{"fileName":"arcrose-patches-internal-scanners-scanners.go","linesOfCode":[{"number":0,"indent":0,"code":"package scanners"},{"number":1,"indent":0,"code":""},{"number":2,"indent":0,"code":"import ("},{"number":3,"indent":1,"code":"\t\"fmt\""},{"number":4,"indent":1,"code":"\t\"os\""},{"number":5,"indent":1,"code":"\tossignal \"os/signal\""},{"number":6,"indent":1,"code":"\t\"syscall\""},{"number":7,"indent":1,"code":"\t\"time\""},{"number":8,"indent":0,"code":""},{"number":9,"indent":1,"code":"\tlog \"github.com/Sirupsen/logrus\""},{"number":10,"indent":0,"code":""},{"number":11,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/done\""},{"number":12,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/pack\""},{"number":13,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/platform\""},{"number":14,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/vulnerability\""},{"number":15,"indent":0,"code":""},{"number":16,"indent":1,"code":"\t\"github.com/arcrose/patches/internal/limit\""},{"number":17,"indent":1,"code":"\t\"github.com/arcrose/patches/internal/scanners/dpkg\""},{"number":18,"indent":0,"code":")"},{"number":19,"indent":0,"code":""},{"number":20,"indent":0,"code":"// Agent is a top-level type that contains all of the dependencies required to"},{"number":21,"indent":0,"code":"// run a scanner."},{"number":22,"indent":0,"code":"// VulnSource is the source from which information about vulnerabilities can"},{"number":23,"indent":0,"code":"// be retrieved."},{"number":24,"indent":0,"code":"// Platform is the platform the Agent is running on."},{"number":25,"indent":0,"code":"// ScanFrequency determines how frequently the Agent will start a scan."},{"number":26,"indent":0,"code":"// SystemScanner handles checking the host for a vulnerable package."},{"number":27,"indent":0,"code":"// Findings will have vulnerable packages found on the host written to it."},{"number":28,"indent":0,"code":"type Agent struct {"},{"number":29,"indent":1,"code":"\tVulnSource    vulnerability.Source"},{"number":30,"indent":1,"code":"\tPlatform      platform.Platform"},{"number":31,"indent":1,"code":"\tScanFrequency time.Duration"},{"number":32,"indent":1,"code":"\tSystemScanner pack.Scanner"},{"number":33,"indent":1,"code":"\tFindings      chan<- vulnerability.Vulnerability"},{"number":34,"indent":0,"code":"}"},{"number":35,"indent":0,"code":""},{"number":36,"indent":0,"code":"// NilScanner is a Scanner that does nothing and always returns Notfound."},{"number":37,"indent":0,"code":"type NilScanner struct{}"},{"number":38,"indent":0,"code":""},{"number":39,"indent":0,"code":"type signal bool"},{"number":40,"indent":0,"code":""},{"number":41,"indent":0,"code":"type scheduler struct {"},{"number":42,"indent":1,"code":"\tschedule  limit.RateLimiter"},{"number":43,"indent":1,"code":"\tticks     chan signal"},{"number":44,"indent":1,"code":"\tisStarted bool"},{"number":45,"indent":1,"code":"\tterminate chan bool"},{"number":46,"indent":1,"code":"\tconfirm   chan bool"},{"number":47,"indent":0,"code":"}"},{"number":48,"indent":0,"code":""},{"number":49,"indent":0,"code":"// Re-use the Job structure as the output from jobRunner."},{"number":50,"indent":0,"code":"// It's all just plumbing."},{"number":51,"indent":0,"code":"type stream vulnerability.Job"},{"number":52,"indent":0,"code":""},{"number":53,"indent":0,"code":"type jobRunner struct {"},{"number":54,"indent":1,"code":"\tclient    vulnerability.Source"},{"number":55,"indent":1,"code":"\tpform     platform.Platform"},{"number":56,"indent":1,"code":"\tsignals   <-chan signal"},{"number":57,"indent":1,"code":"\tisRunning bool"},{"number":58,"indent":1,"code":"\tterminate chan bool"},{"number":59,"indent":1,"code":"\tconfirm   chan bool"},{"number":60,"indent":0,"code":"}"},{"number":61,"indent":0,"code":""},{"number":62,"indent":0,"code":"type setupFn func(map[string]interface{}) (pack.Scanner, error)"},{"number":63,"indent":0,"code":""},{"number":64,"indent":0,"code":"// Lookup attempts to set up a scanner for the desired platform."},{"number":65,"indent":0,"code":"func Lookup(pform platform.Platform, cfg map[string]interface{}) (pack.Scanner, error) {"},{"number":66,"indent":1,"code":"\tsetup, found := supported()[pform]"},{"number":67,"indent":1,"code":"\tif !found {"},{"number":68,"indent":2,"code":"\t\treturn NilScanner{}, fmt.Errorf(\"Cannot set up a scanner for '%s'\", pform.String())"},{"number":69,"indent":1,"code":"\t}"},{"number":70,"indent":0,"code":""},{"number":71,"indent":1,"code":"\tscanner, err := setup(cfg)"},{"number":72,"indent":1,"code":"\tif err != nil {"},{"number":73,"indent":2,"code":"\t\treturn NilScanner{}, fmt.Errorf(\"Failed to set up scanner: '%s'\", err.Error())"},{"number":74,"indent":1,"code":"\t}"},{"number":75,"indent":0,"code":""},{"number":76,"indent":1,"code":"\treturn scanner, nil"},{"number":77,"indent":0,"code":"}"},{"number":78,"indent":0,"code":""},{"number":79,"indent":0,"code":"func newScheduler(freq time.Duration) scheduler {"},{"number":80,"indent":1,"code":"\treturn scheduler{"},{"number":81,"indent":2,"code":"\t\tschedule:  limit.ConstantRateLimiter(freq),"},{"number":82,"indent":2,"code":"\t\tticks:     make(chan signal),"},{"number":83,"indent":2,"code":"\t\tisStarted: false,"},{"number":84,"indent":2,"code":"\t\tterminate: make(chan bool, 1),"},{"number":85,"indent":2,"code":"\t\tconfirm:   make(chan bool, 1),"},{"number":86,"indent":1,"code":"\t}"},{"number":87,"indent":0,"code":"}"},{"number":88,"indent":0,"code":""},{"number":89,"indent":0,"code":"func newJobRunner("},{"number":90,"indent":1,"code":"\tsrc vulnerability.Source,"},{"number":91,"indent":1,"code":"\tpform platform.Platform,"},{"number":92,"indent":1,"code":"\tsignals <-chan signal,"},{"number":93,"indent":0,"code":") jobRunner {"},{"number":94,"indent":1,"code":"\treturn jobRunner{"},{"number":95,"indent":2,"code":"\t\tclient:    src,"},{"number":96,"indent":2,"code":"\t\tpform:     pform,"},{"number":97,"indent":2,"code":"\t\tsignals:   signals,"},{"number":98,"indent":2,"code":"\t\tisRunning: false,"},{"number":99,"indent":2,"code":"\t\tterminate: make(chan bool, 1),"},{"number":100,"indent":2,"code":"\t\tconfirm:   make(chan bool, 1),"},{"number":101,"indent":1,"code":"\t}"},{"number":102,"indent":0,"code":"}"},{"number":103,"indent":0,"code":""},{"number":104,"indent":0,"code":"func supported() map[platform.Platform]setupFn {"},{"number":105,"indent":1,"code":"\treturn map[platform.Platform]setupFn{"},{"number":106,"indent":2,"code":"\t\t//platform.CentOS5:        setupYum,"},{"number":107,"indent":2,"code":"\t\t//platform.CentOS6:        setupYum,"},{"number":108,"indent":2,"code":"\t\t//platform.CentOS7:        setupYum,"},{"number":109,"indent":2,"code":"\t\tplatform.Debian8:        setupDpkg,"},{"number":110,"indent":2,"code":"\t\tplatform.Debian9:        setupDpkg,"},{"number":111,"indent":2,"code":"\t\tplatform.Debian10:       setupDpkg,"},{"number":112,"indent":2,"code":"\t\tplatform.DebianUnstable: setupDpkg,"},{"number":113,"indent":2,"code":"\t\t//platform.Alpine3_3:      setupApk,"},{"number":114,"indent":2,"code":"\t\t//platform.Alpine3_4:      setupApk,"},{"number":115,"indent":2,"code":"\t\t//platform.Alpine3_5:      setupApk,"},{"number":116,"indent":2,"code":"\t\t//platform.Alpine3_6:      setupApk,"},{"number":117,"indent":2,"code":"\t\t//platform.Alpine3_7:      setupApk,"},{"number":118,"indent":2,"code":"\t\t//platform.Alpine3_8:      setupApk,"},{"number":119,"indent":2,"code":"\t\t//platform.Oracle5:        setupYum,"},{"number":120,"indent":2,"code":"\t\t//platform.Oracle6:        setupYum,"},{"number":121,"indent":2,"code":"\t\t//platform.Oracle7:        setupYum,"},{"number":122,"indent":2,"code":"\t\tplatform.Ubuntu12_04: setupDpkg,"},{"number":123,"indent":2,"code":"\t\tplatform.Ubuntu12_10: setupDpkg,"},{"number":124,"indent":2,"code":"\t\tplatform.Ubuntu13_04: setupDpkg,"},{"number":125,"indent":2,"code":"\t\tplatform.Ubuntu13_10: setupDpkg,"},{"number":126,"indent":2,"code":"\t\tplatform.Ubuntu14_04: setupDpkg,"},{"number":127,"indent":2,"code":"\t\tplatform.Ubuntu14_10: setupDpkg,"},{"number":128,"indent":2,"code":"\t\tplatform.Ubuntu15_04: setupDpkg,"},{"number":129,"indent":2,"code":"\t\tplatform.Ubuntu15_10: setupDpkg,"},{"number":130,"indent":2,"code":"\t\tplatform.Ubuntu16_04: setupDpkg,"},{"number":131,"indent":2,"code":"\t\tplatform.Ubuntu16_10: setupDpkg,"},{"number":132,"indent":2,"code":"\t\tplatform.Ubuntu17_04: setupDpkg,"},{"number":133,"indent":2,"code":"\t\tplatform.Ubuntu17_10: setupDpkg,"},{"number":134,"indent":2,"code":"\t\tplatform.Ubuntu18_04: setupDpkg,"},{"number":135,"indent":1,"code":"\t}"},{"number":136,"indent":0,"code":"}"},{"number":137,"indent":0,"code":""},{"number":138,"indent":0,"code":"func setupDpkg(cfg map[string]interface{}) (pack.Scanner, error) {"},{"number":139,"indent":1,"code":"\tcompareFn, ok := cfg[\"compareFn\"].(pack.VersionCompareFunc)"},{"number":140,"indent":1,"code":"\tif !ok {"},{"number":141,"indent":2,"code":"\t\terr := fmt.Errorf(\"Scanner configuration is missing a valid 'compareFn'\")"},{"number":142,"indent":2,"code":"\t\treturn NilScanner{}, err"},{"number":143,"indent":1,"code":"\t}"},{"number":144,"indent":0,"code":""},{"number":145,"indent":1,"code":"\treturn dpkg.NewDPKG(compareFn), nil"},{"number":146,"indent":0,"code":"}"},{"number":147,"indent":0,"code":""},{"number":148,"indent":0,"code":"// Run starts an Agent process of periodically scanning for vulnerable"},{"number":149,"indent":0,"code":"// packages pulled from a source."},{"number":150,"indent":0,"code":"func (agent Agent) Run() {"},{"number":151,"indent":1,"code":"\tsched := newScheduler(agent.ScanFrequency)"},{"number":152,"indent":1,"code":"\tsched.start()"},{"number":153,"indent":1,"code":"\trunner := newJobRunner("},{"number":154,"indent":2,"code":"\t\tagent.VulnSource,"},{"number":155,"indent":2,"code":"\t\tagent.Platform,"},{"number":156,"indent":2,"code":"\t\tsched.clock())"},{"number":157,"indent":1,"code":"\tstream := runner.start()"},{"number":158,"indent":0,"code":""},{"number":159,"indent":1,"code":"\t// Stop everything when the agent process exits"},{"number":160,"indent":1,"code":"\tdefer func() {"},{"number":161,"indent":2,"code":"\t\tsched.stop()"},{"number":162,"indent":2,"code":"\t\trunner.stop()"},{"number":163,"indent":1,"code":"\t}()"},{"number":164,"indent":0,"code":""},{"number":165,"indent":1,"code":"\tsigChan := make(chan os.Signal, 1)"},{"number":166,"indent":1,"code":"\tossignal.Notify("},{"number":167,"indent":2,"code":"\t\tsigChan,"},{"number":168,"indent":2,"code":"\t\tsyscall.SIGHUP,"},{"number":169,"indent":2,"code":"\t\tsyscall.SIGINT,"},{"number":170,"indent":2,"code":"\t\tsyscall.SIGTERM,"},{"number":171,"indent":2,"code":"\t\tsyscall.SIGQUIT)"},{"number":172,"indent":0,"code":""},{"number":173,"indent":1,"code":"\tlog.Infof(\"Starting main Agent process\")"},{"number":174,"indent":0,"code":"agent:"},{"number":175,"indent":1,"code":"\tfor {"},{"number":176,"indent":2,"code":"\t\tselect {"},{"number":177,"indent":2,"code":"\t\tcase vuln := <-stream.Vulns:"},{"number":178,"indent":3,"code":"\t\t\tanyFound := false"},{"number":179,"indent":3,"code":"\t\t\tfor _, pkg := range vuln.FixedInPackages {"},{"number":180,"indent":4,"code":"\t\t\t\tfound, err := agent.SystemScanner.Scan(pkg)"},{"number":181,"indent":4,"code":"\t\t\t\tif found == pack.WasFound {"},{"number":182,"indent":5,"code":"\t\t\t\t\tanyFound = true"},{"number":183,"indent":5,"code":"\t\t\t\t\tbreak"},{"number":184,"indent":4,"code":"\t\t\t\t}"},{"number":185,"indent":4,"code":"\t\t\t\tif err != nil {"},{"number":186,"indent":5,"code":"\t\t\t\t\tlog.Errorf(\"Scanner error: '%s'\", err.Error())"},{"number":187,"indent":4,"code":"\t\t\t\t}"},{"number":188,"indent":3,"code":"\t\t\t}"},{"number":189,"indent":3,"code":"\t\t\tif !anyFound {"},{"number":190,"indent":4,"code":"\t\t\t\tagent.Findings <- vuln"},{"number":191,"indent":3,"code":"\t\t\t}"},{"number":192,"indent":0,"code":""},{"number":193,"indent":2,"code":"\t\tcase err := <-stream.Errors:"},{"number":194,"indent":3,"code":"\t\t\tlog.Error(err)"},{"number":195,"indent":0,"code":""},{"number":196,"indent":2,"code":"\t\tcase <-stream.Finished:"},{"number":197,"indent":3,"code":"\t\t\tbreak agent"},{"number":198,"indent":0,"code":""},{"number":199,"indent":2,"code":"\t\tcase <-sigChan:"},{"number":200,"indent":3,"code":"\t\t\tbreak agent"},{"number":201,"indent":2,"code":"\t\t}"},{"number":202,"indent":1,"code":"\t}"},{"number":203,"indent":0,"code":"}"},{"number":204,"indent":0,"code":""},{"number":205,"indent":0,"code":"func (sched *scheduler) clock() <-chan signal {"},{"number":206,"indent":1,"code":"\treturn sched.ticks"},{"number":207,"indent":0,"code":"}"},{"number":208,"indent":0,"code":""},{"number":209,"indent":0,"code":"func (sched *scheduler) start() error {"},{"number":210,"indent":1,"code":"\tif sched.isStarted {"},{"number":211,"indent":2,"code":"\t\treturn fmt.Errorf(\"Scheduler already started\")"},{"number":212,"indent":1,"code":"\t}"},{"number":213,"indent":0,"code":""},{"number":214,"indent":1,"code":"\tgo __runClock(sched)"},{"number":215,"indent":0,"code":""},{"number":216,"indent":1,"code":"\tsched.isStarted = true"},{"number":217,"indent":1,"code":"\treturn nil"},{"number":218,"indent":0,"code":"}"},{"number":219,"indent":0,"code":""},{"number":220,"indent":0,"code":"func (sched *scheduler) stop() error {"},{"number":221,"indent":1,"code":"\tif !sched.isStarted {"},{"number":222,"indent":2,"code":"\t\treturn fmt.Errorf(\"Scheduler is not running\")"},{"number":223,"indent":1,"code":"\t}"},{"number":224,"indent":0,"code":""},{"number":225,"indent":1,"code":"\tsched.terminate <- true"},{"number":226,"indent":1,"code":"\t<-sched.confirm"},{"number":227,"indent":0,"code":""},{"number":228,"indent":1,"code":"\tsched.isStarted = false"},{"number":229,"indent":1,"code":"\treturn nil"},{"number":230,"indent":0,"code":"}"},{"number":231,"indent":0,"code":""},{"number":232,"indent":0,"code":"func (runner *jobRunner) start() stream {"},{"number":233,"indent":1,"code":"\tlog.Infof(\"Starting job runner\")"},{"number":234,"indent":0,"code":""},{"number":235,"indent":1,"code":"\ts := stream{"},{"number":236,"indent":2,"code":"\t\tVulns:    make(chan vulnerability.Vulnerability),"},{"number":237,"indent":2,"code":"\t\tFinished: make(chan done.Done, 1),"},{"number":238,"indent":2,"code":"\t\tErrors:   make(chan error),"},{"number":239,"indent":1,"code":"\t}"},{"number":240,"indent":0,"code":""},{"number":241,"indent":1,"code":"\tgo __stream(&s, runner)"},{"number":242,"indent":0,"code":""},{"number":243,"indent":1,"code":"\trunner.isRunning = true"},{"number":244,"indent":1,"code":"\treturn s"},{"number":245,"indent":0,"code":"}"},{"number":246,"indent":0,"code":""},{"number":247,"indent":0,"code":"func (runner jobRunner) stop() error {"},{"number":248,"indent":1,"code":"\tif !runner.isRunning {"},{"number":249,"indent":2,"code":"\t\treturn fmt.Errorf(\"JobRunner is not running\")"},{"number":250,"indent":1,"code":"\t}"},{"number":251,"indent":0,"code":""},{"number":252,"indent":1,"code":"\trunner.terminate <- true"},{"number":253,"indent":1,"code":"\t<-runner.confirm"},{"number":254,"indent":0,"code":""},{"number":255,"indent":1,"code":"\trunner.isRunning = false"},{"number":256,"indent":1,"code":"\treturn nil"},{"number":257,"indent":0,"code":"}"},{"number":258,"indent":0,"code":""},{"number":259,"indent":0,"code":"func (_ NilScanner) Scan(_ pack.Package) (pack.Found, error) {"},{"number":260,"indent":1,"code":"\treturn pack.NotFound, nil"},{"number":261,"indent":0,"code":"}"},{"number":262,"indent":0,"code":""},{"number":263,"indent":0,"code":"func __runClock(s *scheduler) {"},{"number":264,"indent":1,"code":"\tblock := s.schedule"},{"number":265,"indent":0,"code":""},{"number":266,"indent":0,"code":"clock:"},{"number":267,"indent":1,"code":"\tfor {"},{"number":268,"indent":2,"code":"\t\tselect {"},{"number":269,"indent":2,"code":"\t\tcase <-block():"},{"number":270,"indent":3,"code":"\t\t\ts.ticks <- signal(true)"},{"number":271,"indent":0,"code":""},{"number":272,"indent":2,"code":"\t\tcase <-s.terminate:"},{"number":273,"indent":3,"code":"\t\t\ts.confirm <- true"},{"number":274,"indent":3,"code":"\t\t\tbreak clock"},{"number":275,"indent":2,"code":"\t\t}"},{"number":276,"indent":1,"code":"\t}"},{"number":277,"indent":0,"code":"}"},{"number":278,"indent":0,"code":""},{"number":279,"indent":0,"code":"func __stream(s *stream, runner *jobRunner) {"},{"number":280,"indent":1,"code":"\tjobRunning := false"},{"number":281,"indent":1,"code":"\tjobFinished := make(chan bool)"},{"number":282,"indent":1,"code":"\tkillJob := make(chan bool)"},{"number":283,"indent":1,"code":"\tconfirmKilled := make(chan bool)"},{"number":284,"indent":0,"code":""},{"number":285,"indent":0,"code":"stream:"},{"number":286,"indent":1,"code":"\tfor {"},{"number":287,"indent":2,"code":"\t\tselect {"},{"number":288,"indent":2,"code":"\t\tcase <-runner.signals:"},{"number":289,"indent":3,"code":"\t\t\tif !jobRunning {"},{"number":290,"indent":4,"code":"\t\t\t\tjob := runner.client.Vulnerabilities(runner.pform)"},{"number":291,"indent":4,"code":"\t\t\t\tgo __runJob(s, job, jobFinished, killJob, confirmKilled)"},{"number":292,"indent":4,"code":"\t\t\t\tjobRunning = true"},{"number":293,"indent":3,"code":"\t\t\t}"},{"number":294,"indent":0,"code":""},{"number":295,"indent":2,"code":"\t\tcase <-jobFinished:"},{"number":296,"indent":3,"code":"\t\t\tjobRunning = false"},{"number":297,"indent":0,"code":""},{"number":298,"indent":2,"code":"\t\tcase <-runner.terminate:"},{"number":299,"indent":3,"code":"\t\t\tif jobRunning {"},{"number":300,"indent":4,"code":"\t\t\t\tkillJob <- true"},{"number":301,"indent":4,"code":"\t\t\t\t<-confirmKilled"},{"number":302,"indent":3,"code":"\t\t\t}"},{"number":303,"indent":3,"code":"\t\t\ts.Finished <- done.Done{}"},{"number":304,"indent":3,"code":"\t\t\trunner.confirm <- true"},{"number":305,"indent":3,"code":"\t\t\tbreak stream"},{"number":306,"indent":2,"code":"\t\t}"},{"number":307,"indent":1,"code":"\t}"},{"number":308,"indent":0,"code":"}"},{"number":309,"indent":0,"code":""},{"number":310,"indent":0,"code":"func __runJob("},{"number":311,"indent":1,"code":"\ts *stream,"},{"number":312,"indent":1,"code":"\tjob vulnerability.Job,"},{"number":313,"indent":1,"code":"\tjobFinished chan<- bool,"},{"number":314,"indent":1,"code":"\tkill <-chan bool,"},{"number":315,"indent":1,"code":"\tconfirm chan<- bool,"},{"number":316,"indent":0,"code":") {"},{"number":317,"indent":0,"code":"job:"},{"number":318,"indent":1,"code":"\tfor {"},{"number":319,"indent":2,"code":"\t\tselect {"},{"number":320,"indent":2,"code":"\t\tcase vuln := <-job.Vulns:"},{"number":321,"indent":3,"code":"\t\t\ts.Vulns <- vuln"},{"number":322,"indent":0,"code":""},{"number":323,"indent":2,"code":"\t\tcase err := <-job.Errors:"},{"number":324,"indent":3,"code":"\t\t\ts.Errors <- err"},{"number":325,"indent":0,"code":""},{"number":326,"indent":2,"code":"\t\tcase <-job.Finished:"},{"number":327,"indent":3,"code":"\t\t\tjobFinished <- true"},{"number":328,"indent":3,"code":"\t\t\tbreak job"},{"number":329,"indent":0,"code":""},{"number":330,"indent":2,"code":"\t\tcase <-kill:"},{"number":331,"indent":3,"code":"\t\t\tconfirm <- true"},{"number":332,"indent":3,"code":"\t\t\tbreak job"},{"number":333,"indent":2,"code":"\t\t}"},{"number":334,"indent":1,"code":"\t}"},{"number":335,"indent":0,"code":"}"},{"number":336,"indent":0,"code":""}]},{"fileName":"arcrose-unicornfig-src-interpreter-lexer.go","linesOfCode":[{"number":0,"indent":0,"code":"package interpreter"},{"number":1,"indent":0,"code":""},{"number":2,"indent":0,"code":"import ("},{"number":3,"indent":1,"code":"\t\"errors\""},{"number":4,"indent":1,"code":"\t\"fmt\""},{"number":5,"indent":1,"code":"\t\"regexp\""},{"number":6,"indent":0,"code":")"},{"number":7,"indent":0,"code":""},{"number":8,"indent":0,"code":"// States for the Lexer FSM"},{"number":9,"indent":0,"code":""},{"number":10,"indent":0,"code":"type State int"},{"number":11,"indent":0,"code":""},{"number":12,"indent":0,"code":"// NOTE - String1 refers to strings in single-quotes ('), and String2 refers to strings in double-quotes (\")"},{"number":13,"indent":0,"code":"// We have two states so that we can have one inside the other."},{"number":14,"indent":0,"code":""},{"number":15,"indent":0,"code":"const ("},{"number":16,"indent":1,"code":"\tERROR   State = iota"},{"number":17,"indent":1,"code":"\tOPEN    State = iota"},{"number":18,"indent":1,"code":"\tSTRING1 State = iota"},{"number":19,"indent":1,"code":"\tSTRING2 State = iota"},{"number":20,"indent":1,"code":"\tCOMMENT State = iota"},{"number":21,"indent":1,"code":"\tNUMBER  State = iota"},{"number":22,"indent":1,"code":"\tNAME    State = iota"},{"number":23,"indent":0,"code":")"},{"number":24,"indent":0,"code":""},{"number":25,"indent":0,"code":"/**"},{"number":26,"indent":0,"code":" * When lexing a program, certain characters need to be treated as terminators for a particular type of value"},{"number":27,"indent":0,"code":" * but should also include that value.  The following instructions dictate what tokens should be added as the"},{"number":28,"indent":0,"code":" * FSM moves from character to character through a program."},{"number":29,"indent":0,"code":" */"},{"number":30,"indent":0,"code":""},{"number":31,"indent":0,"code":"type Instruction int"},{"number":32,"indent":0,"code":""},{"number":33,"indent":0,"code":"const ("},{"number":34,"indent":1,"code":"\tAddNothing         Instruction = iota"},{"number":35,"indent":1,"code":"\tAddToken           Instruction = iota"},{"number":36,"indent":1,"code":"\tAddChar            Instruction = iota"},{"number":37,"indent":1,"code":"\tAddTokenAndChar    Instruction = iota"},{"number":38,"indent":1,"code":"\tAddTokenAndEndSexp Instruction = iota"},{"number":39,"indent":0,"code":")"},{"number":40,"indent":0,"code":""},{"number":41,"indent":0,"code":"/**"},{"number":42,"indent":0,"code":" * The lexer will recurse when S-Expressions are encountered, so that the FSM can essentially be restarted"},{"number":43,"indent":0,"code":" * in a nested S-Expression without having to actually start and manage a new FSM.  These directives tell"},{"number":44,"indent":0,"code":" * the lexer when it should recurse, return from a recursed lexing, or continue normally."},{"number":45,"indent":0,"code":" */"},{"number":46,"indent":0,"code":""},{"number":47,"indent":0,"code":"type RecursiveAction int"},{"number":48,"indent":0,"code":""},{"number":49,"indent":0,"code":"const ("},{"number":50,"indent":1,"code":"\tDoNothing RecursiveAction = iota"},{"number":51,"indent":1,"code":"\tRecurse   RecursiveAction = iota"},{"number":52,"indent":1,"code":"\tReturn    RecursiveAction = iota"},{"number":53,"indent":0,"code":")"},{"number":54,"indent":0,"code":""},{"number":55,"indent":0,"code":"/**"},{"number":56,"indent":0,"code":" * The following are essentially transition tables for the FSM."},{"number":57,"indent":0,"code":" */"},{"number":58,"indent":0,"code":""},{"number":59,"indent":0,"code":"type FSMTransition struct {"},{"number":60,"indent":1,"code":"\tReadMatch string"},{"number":61,"indent":1,"code":"\tWhatToDo  RecursiveAction"},{"number":62,"indent":1,"code":"\tNextState State"},{"number":63,"indent":1,"code":"\tWhatToAdd Instruction"},{"number":64,"indent":1,"code":"\tNewToken  Token"},{"number":65,"indent":0,"code":"}"},{"number":66,"indent":0,"code":""},{"number":67,"indent":0,"code":"var TransitionsFromOpen = [...]FSMTransition{"},{"number":68,"indent":1,"code":"\t{\"\\\\s\", DoNothing, OPEN, AddNothing, NO_TOKEN},"},{"number":69,"indent":1,"code":"\t{\"\\\\(\", Recurse, OPEN, AddToken, START_SEXP},"},{"number":70,"indent":1,"code":"\t{\"'\", DoNothing, STRING1, AddToken, START_STRING},"},{"number":71,"indent":1,"code":"\t{\"\\\"\", DoNothing, STRING2, AddToken, START_STRING},"},{"number":72,"indent":1,"code":"\t{\";\", DoNothing, COMMENT, AddToken, START_COMMENT},"},{"number":73,"indent":1,"code":"\t{\"[0-9]\", DoNothing, NUMBER, AddTokenAndChar, START_NUMBER},"},{"number":74,"indent":1,"code":"\t{\"[0-9a-zA-Z!@#$%^&*-_+=:<,>.?/]\", DoNothing, NAME, AddTokenAndChar, START_NAME},"},{"number":75,"indent":1,"code":"\t{\"\\\\)\", Return, OPEN, AddToken, END_SEXP},"},{"number":76,"indent":0,"code":"}"},{"number":77,"indent":0,"code":""},{"number":78,"indent":0,"code":"// Handle single-quoted strings"},{"number":79,"indent":0,"code":"var TransitionsFromString1 = [...]FSMTransition{"},{"number":80,"indent":1,"code":"\t{\"\\\"\", DoNothing, STRING1, AddChar, NO_TOKEN},"},{"number":81,"indent":1,"code":"\t{\"'\", DoNothing, OPEN, AddToken, END_STRING},"},{"number":82,"indent":1,"code":"\t{\".\", DoNothing, STRING1, AddChar, NO_TOKEN},"},{"number":83,"indent":0,"code":"}"},{"number":84,"indent":0,"code":""},{"number":85,"indent":0,"code":"// Handle double-quoted strings"},{"number":86,"indent":0,"code":"var TransitionsFromString2 = [...]FSMTransition{"},{"number":87,"indent":1,"code":"\t{\"'\", DoNothing, STRING2, AddChar, NO_TOKEN},"},{"number":88,"indent":1,"code":"\t{\"\\\"\", DoNothing, OPEN, AddToken, END_STRING},"},{"number":89,"indent":1,"code":"\t{\".\", DoNothing, STRING2, AddChar, NO_TOKEN},"},{"number":90,"indent":0,"code":"}"},{"number":91,"indent":0,"code":""},{"number":92,"indent":0,"code":"var TransitionsFromComment = [...]FSMTransition{"},{"number":93,"indent":1,"code":"\t{\"\\n\", DoNothing, OPEN, AddToken, END_COMMENT},"},{"number":94,"indent":1,"code":"\t{\".\", DoNothing, COMMENT, AddNothing, NO_TOKEN},"},{"number":95,"indent":0,"code":"}"},{"number":96,"indent":0,"code":""},{"number":97,"indent":0,"code":"var TransitionsFromNumber = [...]FSMTransition{"},{"number":98,"indent":1,"code":"\t{\"\\\\s\", DoNothing, OPEN, AddToken, END_NUMBER},"},{"number":99,"indent":1,"code":"\t{\"\\\\)\", DoNothing, OPEN, AddTokenAndEndSexp, END_NUMBER},"},{"number":100,"indent":1,"code":"\t{\"([0-9]|\\\\.)\", DoNothing, NUMBER, AddChar, NO_TOKEN},"},{"number":101,"indent":0,"code":"}"},{"number":102,"indent":0,"code":""},{"number":103,"indent":0,"code":"var TransitionsFromName = [...]FSMTransition{"},{"number":104,"indent":1,"code":"\t{\"\\\\s\", DoNothing, OPEN, AddToken, END_NAME},"},{"number":105,"indent":1,"code":"\t{\"\\\\)\", DoNothing, OPEN, AddTokenAndEndSexp, END_NAME},"},{"number":106,"indent":1,"code":"\t{\"[0-9a-zA-Z!@#$%^&*-_+=:<,>.?/]\", DoNothing, NAME, AddChar, NO_TOKEN},"},{"number":107,"indent":0,"code":"}"},{"number":108,"indent":0,"code":""},{"number":109,"indent":0,"code":"/**"},{"number":110,"indent":0,"code":" * Determine what state to transition into based on the current state and the next characters in the program."},{"number":111,"indent":0,"code":" */"},{"number":112,"indent":0,"code":"func Transition(state State, read string) (error, State, RecursiveAction, []Token) {"},{"number":113,"indent":1,"code":"\tvar testTransitions []FSMTransition"},{"number":114,"indent":1,"code":"\tswitch state {"},{"number":115,"indent":1,"code":"\tcase OPEN:"},{"number":116,"indent":2,"code":"\t\ttestTransitions = TransitionsFromOpen[:]"},{"number":117,"indent":1,"code":"\tcase STRING1:"},{"number":118,"indent":2,"code":"\t\ttestTransitions = TransitionsFromString1[:]"},{"number":119,"indent":1,"code":"\tcase STRING2:"},{"number":120,"indent":2,"code":"\t\ttestTransitions = TransitionsFromString2[:]"},{"number":121,"indent":1,"code":"\tcase COMMENT:"},{"number":122,"indent":2,"code":"\t\ttestTransitions = TransitionsFromComment[:]"},{"number":123,"indent":1,"code":"\tcase NUMBER:"},{"number":124,"indent":2,"code":"\t\ttestTransitions = TransitionsFromNumber[:]"},{"number":125,"indent":1,"code":"\tcase NAME:"},{"number":126,"indent":2,"code":"\t\ttestTransitions = TransitionsFromName[:]"},{"number":127,"indent":1,"code":"\t}"},{"number":128,"indent":1,"code":"\tfor _, transition := range testTransitions {"},{"number":129,"indent":2,"code":"\t\tmatched, err := regexp.MatchString(transition.ReadMatch, read)"},{"number":130,"indent":2,"code":"\t\tif err != nil {"},{"number":131,"indent":3,"code":"\t\t\treturn err, state, DoNothing, nil"},{"number":132,"indent":2,"code":"\t\t} else if matched {"},{"number":133,"indent":3,"code":"\t\t\tnextState := transition.NextState"},{"number":134,"indent":3,"code":"\t\t\taction := transition.WhatToDo"},{"number":135,"indent":3,"code":"\t\t\tvar tokens []Token"},{"number":136,"indent":3,"code":"\t\t\tswitch transition.WhatToAdd {"},{"number":137,"indent":3,"code":"\t\t\tcase AddNothing:"},{"number":138,"indent":4,"code":"\t\t\t\ttokens = []Token{}"},{"number":139,"indent":3,"code":"\t\t\tcase AddToken:"},{"number":140,"indent":4,"code":"\t\t\t\ttokens = []Token{transition.NewToken}"},{"number":141,"indent":3,"code":"\t\t\tcase AddChar:"},{"number":142,"indent":4,"code":"\t\t\t\ttokens = []Token{Token(read)}"},{"number":143,"indent":3,"code":"\t\t\tcase AddTokenAndEndSexp:"},{"number":144,"indent":4,"code":"\t\t\t\ttokens = []Token{transition.NewToken, END_SEXP}"},{"number":145,"indent":3,"code":"\t\t\tcase AddTokenAndChar:"},{"number":146,"indent":4,"code":"\t\t\t\ttokens = []Token{transition.NewToken, Token(read)}"},{"number":147,"indent":3,"code":"\t\t\t}"},{"number":148,"indent":3,"code":"\t\t\treturn nil, nextState, action, tokens"},{"number":149,"indent":2,"code":"\t\t}"},{"number":150,"indent":1,"code":"\t}"},{"number":151,"indent":1,"code":"\t// TODO - Provide useful error descriptions"},{"number":152,"indent":1,"code":"\terrMsg := fmt.Sprintf(\"No transition from state %d with input %s\", state, read)"},{"number":153,"indent":1,"code":"\treturn errors.New(errMsg), ERROR, DoNothing, []Token{}"},{"number":154,"indent":0,"code":"}"},{"number":155,"indent":0,"code":""},{"number":156,"indent":0,"code":"/**"},{"number":157,"indent":0,"code":" * Lex a program to produce a sequence of tokens and the number of characters read."},{"number":158,"indent":0,"code":" */"},{"number":159,"indent":0,"code":"func Lex(program string, startIndex int) ([]Token, int) {"},{"number":160,"indent":1,"code":"\ttokens := make([]Token, 0)"},{"number":161,"indent":1,"code":"\tcurrentState := OPEN"},{"number":162,"indent":1,"code":"\tfor i := startIndex; i < len(program); i++ {"},{"number":163,"indent":2,"code":"\t\tchar := string(program[i])"},{"number":164,"indent":2,"code":"\t\terr, nextState, action, newTokens := Transition(currentState, string(char))"},{"number":165,"indent":2,"code":"\t\tif err != nil {"},{"number":166,"indent":3,"code":"\t\t\tpanic(err)"},{"number":167,"indent":2,"code":"\t\t}"},{"number":168,"indent":2,"code":"\t\ttokens = append(tokens, newTokens...)"},{"number":169,"indent":2,"code":"\t\tif action == Recurse {"},{"number":170,"indent":3,"code":"\t\t\tnextTokens, newIndex := Lex(program, i+1)"},{"number":171,"indent":3,"code":"\t\t\ttokens = append(tokens, nextTokens...)"},{"number":172,"indent":3,"code":"\t\t\ti = newIndex"},{"number":173,"indent":2,"code":"\t\t} else if action == Return {"},{"number":174,"indent":3,"code":"\t\t\treturn tokens, i"},{"number":175,"indent":2,"code":"\t\t}"},{"number":176,"indent":2,"code":"\t\tcurrentState = nextState"},{"number":177,"indent":1,"code":"\t}"},{"number":178,"indent":1,"code":"\treturn tokens, len(program)"},{"number":179,"indent":0,"code":"}"},{"number":180,"indent":0,"code":""}]},{"fileName":"stratumsecurity-scryptauth-auth.go","linesOfCode":[{"number":0,"indent":0,"code":"package auth"},{"number":1,"indent":0,"code":""},{"number":2,"indent":0,"code":"import ("},{"number":3,"indent":1,"code":"\t\"bytes\""},{"number":4,"indent":1,"code":"\t\"crypto/rand\""},{"number":5,"indent":1,"code":"\t\"crypto/subtle\""},{"number":6,"indent":1,"code":"\t\"encoding/base64\""},{"number":7,"indent":1,"code":"\t\"errors\""},{"number":8,"indent":1,"code":"\t\"golang.org/x/crypto/scrypt\""},{"number":9,"indent":1,"code":"\t\"math\""},{"number":10,"indent":1,"code":"\t\"strconv\""},{"number":11,"indent":0,"code":")"},{"number":12,"indent":0,"code":""},{"number":13,"indent":0,"code":"type HashParameter int"},{"number":14,"indent":0,"code":""},{"number":15,"indent":0,"code":"const ("},{"number":16,"indent":1,"code":"\tMinN           HashParameter = 4          // 2^2,  the minimum allowable N value"},{"number":17,"indent":1,"code":"\tMaxN           HashParameter = 2147483648 // 2^31, the maximum N value we can contain in an int"},{"number":18,"indent":1,"code":"\tMinR           HashParameter = 1          // 2^0,  the minimum r value possible, corresponding to 1 <= p <= MaxP"},{"number":19,"indent":1,"code":"\tMaxR           HashParameter = 1073741823 // 2^30 - 1, the maximum r value possible, requiring p = 1"},{"number":20,"indent":1,"code":"\tMinP           HashParameter = 1          // 2^0,  the minimum p value possible, corresponding to 1 <= r <= MaxR"},{"number":21,"indent":1,"code":"\tMaxP           HashParameter = 1073741823 // 2^30 - 1, the maximum p value possible, requiring r = 1"},{"number":22,"indent":1,"code":"\tMinKeyLen      HashParameter = 32         // the minimum number of bytes a key should contain, corresponds to 256 bits"},{"number":23,"indent":1,"code":"\tMinSaltLen     HashParameter = 8          // the minimum length of a salt, 8 bytes"},{"number":24,"indent":1,"code":"\tDefaultSaltLen HashParameter = 8          // the default length of a salt, 8 bytes"},{"number":25,"indent":1,"code":"\tDefaultKeyLen  HashParameter = 32         // the default number of bytes a key will contain"},{"number":26,"indent":1,"code":"\tDefaultN       HashParameter = 32768      // 2^15, a default N value. 2^14 was the recommended value in 2009"},{"number":27,"indent":1,"code":"\tDefaultR       HashParameter = 8          // the default r value recommended in 2009 (pertains to parallelization)"},{"number":28,"indent":1,"code":"\tDefaultP       HashParameter = 1          // the default p value recommended in 2009 (pertains to parallelization)"},{"number":29,"indent":0,"code":")"},{"number":30,"indent":0,"code":""},{"number":31,"indent":0,"code":"var ("},{"number":32,"indent":1,"code":"\tErrInvalidNValue             = errors.New(\"scrypt/auth: N parameter must be between 2^2 and 2^31 inclusive, and be a power of 2\")"},{"number":33,"indent":1,"code":"\tErrInvalidRValue             = errors.New(\"scrypt/auth: r parameter must be between 2^0 and 2^30 inclusive\")"},{"number":34,"indent":1,"code":"\tErrInvalidPValue             = errors.New(\"scrypt/auth: p parameter must be between 2^0 and 2^30 inclusive\")"},{"number":35,"indent":1,"code":"\tErrInvalidRPValues           = errors.New(\"scrypt/auth: The r and p parameters must be such that r * p < 2^30\")"},{"number":36,"indent":1,"code":"\tErrKeyTooShort               = errors.New(\"scrypt/auth: The minimum allowed key length is 32 bytes, or 256 bits\")"},{"number":37,"indent":1,"code":"\tErrSaltTooShort              = errors.New(\"scrypt/auth: The minimum allowed salt length is 8 bytes or 64 bits\")"},{"number":38,"indent":1,"code":"\tErrInvalidHashFormat         = errors.New(\"scrypt/auth: The expected hashed value format is $4s$salt$N$r$p$hashedPassword\")"},{"number":39,"indent":1,"code":"\tErrMismatchedHashAndPassword = errors.New(\"scrypt/auth: The supplied password does not match the hashed secret\")"},{"number":40,"indent":1,"code":"\tErrMissingPrefix             = errors.New(\"scrypt/auth: Hashed password is not prefixed with the expected $4s$ sequence\")"},{"number":41,"indent":1,"code":"\tErrInsufficientRandomData    = errors.New(\"scrypt/auth: Not enough random data is available to securely hash passwords\")"},{"number":42,"indent":0,"code":")"},{"number":43,"indent":0,"code":""},{"number":44,"indent":0,"code":"/**"},{"number":45,"indent":0,"code":" * A container for the parameters required to be provided to GenerateFromPassword."},{"number":46,"indent":0,"code":" */"},{"number":47,"indent":0,"code":"type HashConfiguration struct {"},{"number":48,"indent":1,"code":"\tN       HashParameter"},{"number":49,"indent":1,"code":"\tR       HashParameter"},{"number":50,"indent":1,"code":"\tP       HashParameter"},{"number":51,"indent":1,"code":"\tSaltLen HashParameter"},{"number":52,"indent":1,"code":"\tKeyLen  HashParameter"},{"number":53,"indent":0,"code":"}"},{"number":54,"indent":0,"code":""},{"number":55,"indent":0,"code":"/**"},{"number":56,"indent":0,"code":" * Test that the parameters provided to scrypt will satisfy all its requirements."},{"number":57,"indent":0,"code":" */"},{"number":58,"indent":0,"code":"func verifyParameterValidity(parameters HashConfiguration) error {"},{"number":59,"indent":1,"code":"\t// Check that N is in the allowed range and a power of 2"},{"number":60,"indent":1,"code":"\texponent := math.Log2(float64(parameters.N))"},{"number":61,"indent":1,"code":"\tisWhole := exponent == math.Trunc(exponent)"},{"number":62,"indent":1,"code":"\tif parameters.N < MinN || parameters.N > MaxN || !isWhole {"},{"number":63,"indent":2,"code":"\t\treturn ErrInvalidNValue"},{"number":64,"indent":1,"code":"\t}"},{"number":65,"indent":1,"code":"\t// Check that r and p are positive integers less than 2^30 and that r * p < 2^30"},{"number":66,"indent":1,"code":"\tif parameters.R < MinR || parameters.R > MaxR {"},{"number":67,"indent":2,"code":"\t\treturn ErrInvalidRValue"},{"number":68,"indent":1,"code":"\t}"},{"number":69,"indent":1,"code":"\tif parameters.P < MinP || parameters.P > MaxP {"},{"number":70,"indent":2,"code":"\t\treturn ErrInvalidPValue"},{"number":71,"indent":1,"code":"\t}"},{"number":72,"indent":1,"code":"\tproduct := parameters.R * parameters.P"},{"number":73,"indent":1,"code":"\tif product <= 0 || product > MaxP {"},{"number":74,"indent":2,"code":"\t\treturn ErrInvalidRPValues"},{"number":75,"indent":1,"code":"\t}"},{"number":76,"indent":1,"code":"\t// Check that the salt is long enough"},{"number":77,"indent":1,"code":"\tif parameters.SaltLen < MinSaltLen {"},{"number":78,"indent":2,"code":"\t\treturn ErrSaltTooShort"},{"number":79,"indent":1,"code":"\t}"},{"number":80,"indent":1,"code":"\t// Check that the key length is large enough"},{"number":81,"indent":1,"code":"\tif parameters.KeyLen < MinKeyLen {"},{"number":82,"indent":2,"code":"\t\treturn ErrKeyTooShort"},{"number":83,"indent":1,"code":"\t}"},{"number":84,"indent":1,"code":"\treturn nil"},{"number":85,"indent":0,"code":"}"},{"number":86,"indent":0,"code":""},{"number":87,"indent":0,"code":"func encodeParameters(hashedValue, salt []byte, parameters HashConfiguration) []byte {"},{"number":88,"indent":1,"code":"\tsep := byte('$')"},{"number":89,"indent":1,"code":"\t// encoded will grow as we call append."},{"number":90,"indent":1,"code":"\tencoded := make([]byte, 0)"},{"number":91,"indent":1,"code":"\tencoded = append(encoded, []byte(\"$4s$\")...)"},{"number":92,"indent":1,"code":"\tencSalt := []byte(base64.StdEncoding.EncodeToString(salt))"},{"number":93,"indent":1,"code":"\tencoded = append(encoded, encSalt...)"},{"number":94,"indent":1,"code":"\tencN := []byte(strconv.Itoa(int(parameters.N)))"},{"number":95,"indent":1,"code":"\tencR := []byte(strconv.Itoa(int(parameters.R)))"},{"number":96,"indent":1,"code":"\tencP := []byte(strconv.Itoa(int(parameters.P)))"},{"number":97,"indent":1,"code":"\tencoded = append(encoded, sep)"},{"number":98,"indent":1,"code":"\tencoded = append(encoded, encN...)"},{"number":99,"indent":1,"code":"\tencoded = append(encoded, sep)"},{"number":100,"indent":1,"code":"\tencoded = append(encoded, encR...)"},{"number":101,"indent":1,"code":"\tencoded = append(encoded, sep)"},{"number":102,"indent":1,"code":"\tencoded = append(encoded, encP...)"},{"number":103,"indent":1,"code":"\tencHashedValue := []byte(base64.StdEncoding.EncodeToString(hashedValue))"},{"number":104,"indent":1,"code":"\tencoded = append(encoded, sep)"},{"number":105,"indent":1,"code":"\tencoded = append(encoded, encHashedValue...)"},{"number":106,"indent":1,"code":"\treturn encoded"},{"number":107,"indent":0,"code":"}"},{"number":108,"indent":0,"code":""},{"number":109,"indent":0,"code":"func decodeParameters(hashedPassword []byte) (HashConfiguration, []byte, error) {"},{"number":110,"indent":1,"code":"\t// Guarantee the expected prefix is present"},{"number":111,"indent":1,"code":"\tif len(hashedPassword) < 4 || !bytes.Equal(hashedPassword[:4], []byte(\"$4s$\")) {"},{"number":112,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, ErrMissingPrefix"},{"number":113,"indent":1,"code":"\t}"},{"number":114,"indent":1,"code":"\t// Guarantee that the salt, N, r, p, and hash are all present."},{"number":115,"indent":1,"code":"\tparts := bytes.Split(hashedPassword[4:], []byte(\"$\"))"},{"number":116,"indent":1,"code":"\tif len(parts) != 5 {"},{"number":117,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, ErrInvalidHashFormat"},{"number":118,"indent":1,"code":"\t}"},{"number":119,"indent":1,"code":"\t// Extract and decode the salt back into its raw []byte format."},{"number":120,"indent":1,"code":"\tsalt := make([]byte, base64.StdEncoding.DecodedLen(len(parts[0])))"},{"number":121,"indent":1,"code":"\tsaltBytesRead, decodeErr := base64.StdEncoding.Decode(salt, parts[0])"},{"number":122,"indent":1,"code":"\tif decodeErr != nil {"},{"number":123,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, ErrInvalidHashFormat"},{"number":124,"indent":1,"code":"\t}"},{"number":125,"indent":1,"code":"\tsalt = salt[:saltBytesRead]"},{"number":126,"indent":1,"code":"\t// Parse the numeric values out into actual numeric types."},{"number":127,"indent":1,"code":"\tnParam, parseErr1 := strconv.Atoi(string(parts[1]))"},{"number":128,"indent":1,"code":"\trParam, parseErr2 := strconv.Atoi(string(parts[2]))"},{"number":129,"indent":1,"code":"\tpParam, parseErr3 := strconv.Atoi(string(parts[3]))"},{"number":130,"indent":1,"code":"\tif parseErr1 != nil || parseErr2 != nil || parseErr3 != nil {"},{"number":131,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, ErrInvalidHashFormat"},{"number":132,"indent":1,"code":"\t}"},{"number":133,"indent":1,"code":"\t// check that the hashed value at the end is properly base64 encoded."},{"number":134,"indent":1,"code":"\tdecodedHash := make([]byte, base64.StdEncoding.DecodedLen(len(parts[4])))"},{"number":135,"indent":1,"code":"\thashBytesRead, decodeErr := base64.StdEncoding.Decode(decodedHash, parts[4])"},{"number":136,"indent":1,"code":"\tif decodeErr != nil {"},{"number":137,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, ErrInvalidHashFormat"},{"number":138,"indent":1,"code":"\t}"},{"number":139,"indent":1,"code":"\t// Finally put the parameters parsed into a HashConfiguration and check"},{"number":140,"indent":1,"code":"\t// that they all satisfy the requirements on each parameter."},{"number":141,"indent":1,"code":"\tparams, validityErr := NewHashConfiguration("},{"number":142,"indent":2,"code":"\t\tnParam,"},{"number":143,"indent":2,"code":"\t\trParam,"},{"number":144,"indent":2,"code":"\t\tpParam,"},{"number":145,"indent":2,"code":"\t\tsaltBytesRead,"},{"number":146,"indent":2,"code":"\t\thashBytesRead)"},{"number":147,"indent":1,"code":"\tif validityErr != nil {"},{"number":148,"indent":2,"code":"\t\treturn HashConfiguration{}, nil, validityErr"},{"number":149,"indent":1,"code":"\t}"},{"number":150,"indent":1,"code":"\treturn params, salt, nil"},{"number":151,"indent":0,"code":"}"},{"number":152,"indent":0,"code":""},{"number":153,"indent":0,"code":"/**"},{"number":154,"indent":0,"code":" * Produce a HashConfiguration with the most simple, basic recommended values."},{"number":155,"indent":0,"code":" */"},{"number":156,"indent":0,"code":"func DefaultHashConfiguration() HashConfiguration {"},{"number":157,"indent":1,"code":"\treturn HashConfiguration{"},{"number":158,"indent":2,"code":"\t\tDefaultN,"},{"number":159,"indent":2,"code":"\t\tDefaultR,"},{"number":160,"indent":2,"code":"\t\tDefaultP,"},{"number":161,"indent":2,"code":"\t\tDefaultSaltLen,"},{"number":162,"indent":2,"code":"\t\tDefaultKeyLen,"},{"number":163,"indent":1,"code":"\t}"},{"number":164,"indent":0,"code":"}"},{"number":165,"indent":0,"code":""},{"number":166,"indent":0,"code":"/**"},{"number":167,"indent":0,"code":" * Create a new HashConfiguration and verify that the fields provided meet scrypt's"},{"number":168,"indent":0,"code":" * requirements.  It is highly recommended that this function be used rather than creating"},{"number":169,"indent":0,"code":" * a configuration by hand.  Accepts `int`s as input for user convenience"},{"number":170,"indent":0,"code":" */"},{"number":171,"indent":0,"code":"func NewHashConfiguration(n, r, p, saltLen, keyLen int) (HashConfiguration, error) {"},{"number":172,"indent":1,"code":"\tparameters := HashConfiguration{"},{"number":173,"indent":2,"code":"\t\tHashParameter(n),"},{"number":174,"indent":2,"code":"\t\tHashParameter(r),"},{"number":175,"indent":2,"code":"\t\tHashParameter(p),"},{"number":176,"indent":2,"code":"\t\tHashParameter(saltLen),"},{"number":177,"indent":2,"code":"\t\tHashParameter(keyLen),"},{"number":178,"indent":1,"code":"\t}"},{"number":179,"indent":1,"code":"\tparamErr := verifyParameterValidity(parameters)"},{"number":180,"indent":1,"code":"\tif paramErr != nil {"},{"number":181,"indent":2,"code":"\t\treturn HashConfiguration{}, paramErr"},{"number":182,"indent":1,"code":"\t}"},{"number":183,"indent":1,"code":"\treturn parameters, nil"},{"number":184,"indent":0,"code":"}"},{"number":185,"indent":0,"code":""},{"number":186,"indent":0,"code":"/**"},{"number":187,"indent":0,"code":" * Creates an encoded sequence of bytes containing all of the parameters passed to"},{"number":188,"indent":0,"code":" * scrypt and the hash itself.  Presented with a very similar interface to that of"},{"number":189,"indent":0,"code":" * golang.org/x/crypto/bcrypt."},{"number":190,"indent":0,"code":" */"},{"number":191,"indent":0,"code":"func GenerateFromPassword(password []byte, parameters HashConfiguration) ([]byte, error) {"},{"number":192,"indent":1,"code":"\t// Do an extra check on the input to make sure it meets our standards."},{"number":193,"indent":1,"code":"\tparamErr := verifyParameterValidity(parameters)"},{"number":194,"indent":1,"code":"\tif paramErr != nil {"},{"number":195,"indent":2,"code":"\t\treturn nil, paramErr"},{"number":196,"indent":1,"code":"\t}"},{"number":197,"indent":1,"code":"\t// Pull some random bytes to use as a salt and make sure we got as much as expected."},{"number":198,"indent":1,"code":"\tsalt := make([]byte, parameters.SaltLen)"},{"number":199,"indent":1,"code":"\tbytesRead, randSrcErr := rand.Read(salt)"},{"number":200,"indent":1,"code":"\tif HashParameter(bytesRead) != parameters.SaltLen {"},{"number":201,"indent":2,"code":"\t\treturn nil, ErrInsufficientRandomData"},{"number":202,"indent":1,"code":"\t}"},{"number":203,"indent":1,"code":"\tif randSrcErr != nil {"},{"number":204,"indent":2,"code":"\t\treturn nil, randSrcErr"},{"number":205,"indent":1,"code":"\t}"},{"number":206,"indent":1,"code":"\t// Invoke the scrypt library and augment the hashed value with the hash parameters."},{"number":207,"indent":1,"code":"\thashedValue, hashErr := scrypt.Key("},{"number":208,"indent":2,"code":"\t\tpassword,"},{"number":209,"indent":2,"code":"\t\tsalt,"},{"number":210,"indent":2,"code":"\t\tint(parameters.N),"},{"number":211,"indent":2,"code":"\t\tint(parameters.R),"},{"number":212,"indent":2,"code":"\t\tint(parameters.P),"},{"number":213,"indent":2,"code":"\t\tint(parameters.KeyLen))"},{"number":214,"indent":1,"code":"\tif hashErr != nil {"},{"number":215,"indent":2,"code":"\t\treturn nil, hashErr"},{"number":216,"indent":1,"code":"\t}"},{"number":217,"indent":1,"code":"\treturn encodeParameters(hashedValue, salt, parameters), nil"},{"number":218,"indent":0,"code":"}"},{"number":219,"indent":0,"code":""},{"number":220,"indent":0,"code":"/**"},{"number":221,"indent":0,"code":" * Hash the provided password with the already hashed password using the same parameters"},{"number":222,"indent":0,"code":" * used to hash the latter.  A constant time comparison between the encoded result of the"},{"number":223,"indent":0,"code":" * hash operation and existing hashed value tells us if the passwords match."},{"number":224,"indent":0,"code":" */"},{"number":225,"indent":0,"code":"func CompareHashAndPassword(hashedPassword, password []byte) error {"},{"number":226,"indent":1,"code":"\t// Extract the parameters and salt encoded in the hashed value."},{"number":227,"indent":1,"code":"\tparameters, salt, decodeErr := decodeParameters(hashedPassword)"},{"number":228,"indent":1,"code":"\tif decodeErr != nil {"},{"number":229,"indent":2,"code":"\t\treturn decodeErr"},{"number":230,"indent":1,"code":"\t}"},{"number":231,"indent":1,"code":"\t// Hash the input password with the same parameters used for the already hashed value."},{"number":232,"indent":1,"code":"\thashedValue, hashErr := scrypt.Key("},{"number":233,"indent":2,"code":"\t\tpassword,"},{"number":234,"indent":2,"code":"\t\tsalt,"},{"number":235,"indent":2,"code":"\t\tint(parameters.N),"},{"number":236,"indent":2,"code":"\t\tint(parameters.R),"},{"number":237,"indent":2,"code":"\t\tint(parameters.P),"},{"number":238,"indent":2,"code":"\t\tint(parameters.KeyLen))"},{"number":239,"indent":1,"code":"\tif hashErr != nil {"},{"number":240,"indent":2,"code":"\t\treturn hashErr"},{"number":241,"indent":1,"code":"\t}"},{"number":242,"indent":1,"code":"\t// Encode the newly hashed password the same way as the previously encoded one."},{"number":243,"indent":1,"code":"\tencoded := encodeParameters(hashedValue, salt, parameters)"},{"number":244,"indent":1,"code":"\t// Use a constant time comparison from crypto/subtle to ensure the values match."},{"number":245,"indent":1,"code":"\tareEqual := subtle.ConstantTimeCompare(hashedPassword, encoded) == 1"},{"number":246,"indent":1,"code":"\tif !areEqual {"},{"number":247,"indent":2,"code":"\t\treturn ErrMismatchedHashAndPassword"},{"number":248,"indent":1,"code":"\t}"},{"number":249,"indent":1,"code":"\treturn nil"},{"number":250,"indent":0,"code":"}"},{"number":251,"indent":0,"code":""}]}]},{"languageName":"python","sourceFiles":[{"fileName":"arcrose-result_py-result_py-__init__.py","linesOfCode":[{"number":0,"indent":0,"code":"'''result_py/__init__.py"},{"number":1,"indent":0,"code":"Error types used to encode error handling into our type system and error-handling code."},{"number":2,"indent":0,"code":"'''"},{"number":3,"indent":0,"code":""},{"number":4,"indent":0,"code":"from contextlib import AbstractContextManager"},{"number":5,"indent":0,"code":"import enum"},{"number":6,"indent":0,"code":"from typing import Generic, Optional, TypeVar"},{"number":7,"indent":0,"code":""},{"number":8,"indent":0,"code":""},{"number":9,"indent":0,"code":"# !!! NOTE !!!"},{"number":10,"indent":0,"code":"#"},{"number":11,"indent":0,"code":"# You'll notice that the type signatures of Result's methods have been commented out."},{"number":12,"indent":0,"code":"# The reason for this is because Python does not yet have support for representing"},{"number":13,"indent":0,"code":"# the type of a generic class before said class is defined. As a result, methods"},{"number":14,"indent":0,"code":"# cannot refer to their class type in arguments or return values."},{"number":15,"indent":0,"code":"#"},{"number":16,"indent":0,"code":"# See:"},{"number":17,"indent":0,"code":"# [0] https://github.com/python/mypy/issues/1212"},{"number":18,"indent":0,"code":"# [1] https://github.com/python/mypy/issues/3645"},{"number":19,"indent":0,"code":"# [2] https://github.com/python/mypy/issues/2354"},{"number":20,"indent":0,"code":""},{"number":21,"indent":0,"code":""},{"number":22,"indent":0,"code":"# The generic 'Ok' value for a Result."},{"number":23,"indent":0,"code":"T = TypeVar('T')"},{"number":24,"indent":0,"code":""},{"number":25,"indent":0,"code":"# A generic type for transformations from `Ok(T)` to `Ok(U)`."},{"number":26,"indent":0,"code":"U = TypeVar('U')"},{"number":27,"indent":0,"code":""},{"number":28,"indent":0,"code":"# The generic 'Err' value for a Result.  Must be either `Exception` or a subclass thereof."},{"number":29,"indent":0,"code":"E = TypeVar('E', bound=Exception)"},{"number":30,"indent":0,"code":""},{"number":31,"indent":0,"code":"# A generic type for transformations from `Err(E)` to `Err(F)`."},{"number":32,"indent":0,"code":"F = TypeVar('F', bound=Exception)"},{"number":33,"indent":0,"code":""},{"number":34,"indent":0,"code":""},{"number":35,"indent":0,"code":"class _ResultVariant(enum.Enum):"},{"number":36,"indent":1,"code":"    '''Enumerates the variants that Result can take.'''"},{"number":37,"indent":0,"code":""},{"number":38,"indent":1,"code":"    OK = enum.auto()"},{"number":39,"indent":1,"code":"    ERR = enum.auto()"},{"number":40,"indent":0,"code":""},{"number":41,"indent":0,"code":""},{"number":42,"indent":0,"code":"class Result(Generic[T, E], AbstractContextManager):"},{"number":43,"indent":1,"code":"    '''A container for the result of functions that can produce errors."},{"number":44,"indent":1,"code":"    Instances should be constructed using either the `Ok` or `Err` functions."},{"number":45,"indent":1,"code":"    '''"},{"number":46,"indent":0,"code":""},{"number":47,"indent":1,"code":"    def __init__(self, ok: T = None, err: E = None) -> None:"},{"number":48,"indent":2,"code":"        '''Construct a new result with either an Ok or Err value. Not for use by consumers of this type.'''"},{"number":49,"indent":0,"code":""},{"number":50,"indent":2,"code":"        self._variant = _ResultVariant.ERR  # type: _ResultVariant"},{"number":51,"indent":2,"code":"        self._ok = None  # type: Optional[T]"},{"number":52,"indent":2,"code":"        self._err = None  # type: Optional[E]"},{"number":53,"indent":0,"code":""},{"number":54,"indent":2,"code":"        if err is not None:"},{"number":55,"indent":3,"code":"            self._err = err"},{"number":56,"indent":2,"code":"        else:"},{"number":57,"indent":3,"code":"            self._variant = _ResultVariant.OK"},{"number":58,"indent":3,"code":"            self._ok = ok"},{"number":59,"indent":0,"code":""},{"number":60,"indent":0,"code":""},{"number":61,"indent":1,"code":"    def __enter__(self):"},{"number":62,"indent":2,"code":"        '''Proxy any context established by a value contained in an Ok variant through this Result.'''"},{"number":63,"indent":0,"code":""},{"number":64,"indent":2,"code":"        if self.is_ok():"},{"number":65,"indent":3,"code":"            return Ok(self._ok.__enter__())"},{"number":66,"indent":0,"code":""},{"number":67,"indent":2,"code":"        return self"},{"number":68,"indent":0,"code":""},{"number":69,"indent":0,"code":""},{"number":70,"indent":1,"code":"    def __exit__(self, exc_type, exc_val, exc_tb):"},{"number":71,"indent":2,"code":"        '''Proxy any context teardown handled by a value contained in an Ok variant through this Result.'''"},{"number":72,"indent":0,"code":""},{"number":73,"indent":2,"code":"        if self.is_ok():"},{"number":74,"indent":3,"code":"            return self._ok.__exit__(exc_type, exc_val, exc_tb)"},{"number":75,"indent":0,"code":""},{"number":76,"indent":0,"code":""},{"number":77,"indent":1,"code":"    def is_ok(self) -> bool:"},{"number":78,"indent":2,"code":"        '''Determines whether the Result contains an Ok value.'''"},{"number":79,"indent":0,"code":""},{"number":80,"indent":2,"code":"        return self._variant == _ResultVariant.OK"},{"number":81,"indent":0,"code":""},{"number":82,"indent":0,"code":""},{"number":83,"indent":1,"code":"    def is_err(self) -> bool:"},{"number":84,"indent":2,"code":"        '''Determines whether the Result contains an Err value.'''"},{"number":85,"indent":0,"code":""},{"number":86,"indent":2,"code":"        return not self.is_ok()"},{"number":87,"indent":0,"code":""},{"number":88,"indent":0,"code":""},{"number":89,"indent":1,"code":"    def ok(self) -> Optional[T]:"},{"number":90,"indent":2,"code":"        '''Converts the Result into an Optional[T] containing the Ok value if present, else None.'''"},{"number":91,"indent":0,"code":""},{"number":92,"indent":2,"code":"        if self.is_ok():"},{"number":93,"indent":3,"code":"            return self._ok"},{"number":94,"indent":0,"code":""},{"number":95,"indent":2,"code":"        return None"},{"number":96,"indent":0,"code":""},{"number":97,"indent":0,"code":""},{"number":98,"indent":1,"code":"    def err(self) -> Optional[E]:"},{"number":99,"indent":2,"code":"        '''Converts the Result into an Optional[E] containing the Err value if present, else None.'''"},{"number":100,"indent":0,"code":""},{"number":101,"indent":2,"code":"        if self.is_err():"},{"number":102,"indent":3,"code":"            return self._err"},{"number":103,"indent":0,"code":""},{"number":104,"indent":2,"code":"        return None"},{"number":105,"indent":0,"code":""},{"number":106,"indent":0,"code":""},{"number":107,"indent":1,"code":"    # def map(self, f: Callable[[T], U]) -> Result[U, E]:"},{"number":108,"indent":1,"code":"    def map(self, f):"},{"number":109,"indent":2,"code":"        '''Map a function over an Ok variant value, leaving an Err untouched.'''"},{"number":110,"indent":0,"code":""},{"number":111,"indent":2,"code":"        if self.is_err():"},{"number":112,"indent":3,"code":"            return Err(self._err)"},{"number":113,"indent":0,"code":""},{"number":114,"indent":2,"code":"        return Ok(f(self._ok))"},{"number":115,"indent":0,"code":""},{"number":116,"indent":0,"code":""},{"number":117,"indent":1,"code":"    # def map_err(self, f: Callable[[E], F]) -> Result[T, F]:"},{"number":118,"indent":1,"code":"    def map_err(self, f):"},{"number":119,"indent":2,"code":"        '''Map a function over an Err variant's error, leaving an Ok untouched.'''"},{"number":120,"indent":0,"code":""},{"number":121,"indent":2,"code":"        if self.is_ok():"},{"number":122,"indent":3,"code":"            return Ok(self._ok)"},{"number":123,"indent":0,"code":""},{"number":124,"indent":2,"code":"        return Err(f(self._err))"},{"number":125,"indent":0,"code":""},{"number":126,"indent":0,"code":""},{"number":127,"indent":1,"code":"    # def and_then(self, f: Callable[[T], Result[U, E]]) -> Result[U, E]:"},{"number":128,"indent":1,"code":"    def and_then(self, f):"},{"number":129,"indent":2,"code":"        '''Flat map a function that produces a Result over an Ok variant's value, leaving an Err untouched.'''"},{"number":130,"indent":0,"code":""},{"number":131,"indent":2,"code":"        if self.is_err():"},{"number":132,"indent":3,"code":"            return Err(self._err)"},{"number":133,"indent":0,"code":""},{"number":134,"indent":2,"code":"        return f(self._ok)"},{"number":135,"indent":0,"code":""},{"number":136,"indent":0,"code":""},{"number":137,"indent":1,"code":"    # def or_else(self, f: Callable[[E], Result[T, F]]) -> Result[T, F]:"},{"number":138,"indent":1,"code":"    def or_else(self, f):"},{"number":139,"indent":2,"code":"        '''Flat map a function that produces a Result over an Err variant's value, leaving an Ok untouched.'''"},{"number":140,"indent":0,"code":""},{"number":141,"indent":2,"code":"        if self.is_ok():"},{"number":142,"indent":3,"code":"            return Ok(self._ok)"},{"number":143,"indent":0,"code":""},{"number":144,"indent":2,"code":"        return f(self._err)"},{"number":145,"indent":0,"code":""},{"number":146,"indent":0,"code":""},{"number":147,"indent":1,"code":"    # def conjunct(self, res: Result[U, E]) -> Result[U, E]:"},{"number":148,"indent":1,"code":"    def conjunct(self, res):"},{"number":149,"indent":2,"code":"        '''Returns res if the self is an Ok variant, else returns the Err variant of self.'''"},{"number":150,"indent":0,"code":""},{"number":151,"indent":2,"code":"        if self.is_err():"},{"number":152,"indent":3,"code":"            return Err(self._err)"},{"number":153,"indent":0,"code":""},{"number":154,"indent":2,"code":"        return res"},{"number":155,"indent":0,"code":""},{"number":156,"indent":0,"code":""},{"number":157,"indent":1,"code":"    # def disjunct(self, res: Result[U, E]) -> Result[U, E]:"},{"number":158,"indent":1,"code":"    def disjunct(self, res):"},{"number":159,"indent":2,"code":"        '''returns res if the self is an Err variant, else returns the Ok variant of self.'''"},{"number":160,"indent":0,"code":""},{"number":161,"indent":2,"code":"        if self.is_ok():"},{"number":162,"indent":3,"code":"            return Ok(self._ok)"},{"number":163,"indent":0,"code":""},{"number":164,"indent":2,"code":"        return res"},{"number":165,"indent":0,"code":""},{"number":166,"indent":0,"code":""},{"number":167,"indent":0,"code":"def Ok(value: T) -> Result[T, E]:"},{"number":168,"indent":1,"code":"    '''Construct a new Result of the Ok variant containing some value.'''"},{"number":169,"indent":0,"code":""},{"number":170,"indent":1,"code":"    return Result(ok=value)"},{"number":171,"indent":0,"code":""},{"number":172,"indent":0,"code":""},{"number":173,"indent":0,"code":"def Err(error: E) -> Result[T, E]:"},{"number":174,"indent":1,"code":"    '''Construct a new Result of the Err variant containing some error.'''"},{"number":175,"indent":0,"code":""},{"number":176,"indent":1,"code":"    return Result(err=error)"},{"number":177,"indent":0,"code":""},{"number":178,"indent":0,"code":""},{"number":179,"indent":0,"code":"def try_(fn):"},{"number":180,"indent":1,"code":"    '''Wraps any function that may raise an exception in another function"},{"number":181,"indent":1,"code":"    that will return an Err containing that exception if it is raised, or"},{"number":182,"indent":1,"code":"    else simply wrap the successful result in Ok."},{"number":183,"indent":1,"code":"    '''"},{"number":184,"indent":0,"code":""},{"number":185,"indent":1,"code":"    def closure(*args, **kwargs):"},{"number":186,"indent":2,"code":"        '''Call the wrapped function.'''"},{"number":187,"indent":0,"code":""},{"number":188,"indent":2,"code":"        try:"},{"number":189,"indent":3,"code":"            return Ok(fn(*args, **kwargs))"},{"number":190,"indent":2,"code":"        except Exception as ex:"},{"number":191,"indent":3,"code":"            return Err(ex)"},{"number":192,"indent":0,"code":""},{"number":193,"indent":1,"code":"    return closure"},{"number":194,"indent":0,"code":""}]}]}]