const CODE_SNIPPETS = [{"languageName":"rust","sourceFiles":[]},{"languageName":"go","sourceFiles":[{"fileName":"arcrose-patches-internal-server-jobs.go","linesOfCode":[{"number":0,"indent":0,"code":"package servers"},{"number":1,"indent":0,"code":""},{"number":2,"indent":0,"code":"import ("},{"number":3,"indent":1,"code":"\t\"crypto/rand\""},{"number":4,"indent":1,"code":"\t\"encoding/hex\""},{"number":5,"indent":1,"code":"\t\"fmt\""},{"number":6,"indent":1,"code":"\t\"time\""},{"number":7,"indent":0,"code":""},{"number":8,"indent":1,"code":"\t\"github.com/arcrose/patches/pkg/vulnerability\""},{"number":9,"indent":0,"code":")"},{"number":10,"indent":0,"code":""},{"number":11,"indent":0,"code":"var defaultReadTimeout time.Duration = 30 * time.Millisecond"},{"number":12,"indent":0,"code":""},{"number":13,"indent":0,"code":"var errNoSuchJob = \"no such job\""},{"number":14,"indent":0,"code":""},{"number":15,"indent":0,"code":"const ("},{"number":16,"indent":1,"code":"\tdefaultMaxJobs uint = 128"},{"number":17,"indent":0,"code":""},{"number":18,"indent":1,"code":"\tnumJobIDBytes uint = 16"},{"number":19,"indent":0,"code":")"},{"number":20,"indent":0,"code":""},{"number":21,"indent":0,"code":"type complete bool"},{"number":22,"indent":0,"code":""},{"number":23,"indent":0,"code":"// VulnJobManager manages \"jobs\" containing channels from which vulnerabilities"},{"number":24,"indent":0,"code":"// are read."},{"number":25,"indent":0,"code":"type VulnJobManager struct {"},{"number":26,"indent":1,"code":"\tmanaging    map[string]vulnerability.Job"},{"number":27,"indent":1,"code":"\tnumManaged  uint"},{"number":28,"indent":1,"code":"\tmaxJobs     uint"},{"number":29,"indent":1,"code":"\tmaxReadTime time.Duration"},{"number":30,"indent":0,"code":"}"},{"number":31,"indent":0,"code":""},{"number":32,"indent":0,"code":"// VulnJobManagerOptions are optional configuration parameters for VulnJobManager."},{"number":33,"indent":0,"code":"type VulnJobManagerOptions struct {"},{"number":34,"indent":1,"code":"\tMaxJobs     uint"},{"number":35,"indent":1,"code":"\tReadTimeout time.Duration"},{"number":36,"indent":0,"code":"}"},{"number":37,"indent":0,"code":""},{"number":38,"indent":0,"code":"// NewVulnJobManager constructs a new VulnJobManager."},{"number":39,"indent":0,"code":"func NewVulnJobManager(opts VulnJobManagerOptions) VulnJobManager {"},{"number":40,"indent":1,"code":"\topts.applyDefaults()"},{"number":41,"indent":1,"code":"\treturn VulnJobManager{"},{"number":42,"indent":2,"code":"\t\tmanaging:    make(map[string]vulnerability.Job),"},{"number":43,"indent":2,"code":"\t\tnumManaged:  0,"},{"number":44,"indent":2,"code":"\t\tmaxJobs:     opts.MaxJobs,"},{"number":45,"indent":2,"code":"\t\tmaxReadTime: opts.ReadTimeout,"},{"number":46,"indent":1,"code":"\t}"},{"number":47,"indent":0,"code":"}"},{"number":48,"indent":0,"code":""},{"number":49,"indent":0,"code":"// Register attempts to add a new job to the manager, returning an ID that"},{"number":50,"indent":0,"code":"// must be provided during lookups."},{"number":51,"indent":0,"code":"func (jobs *VulnJobManager) Register(job vulnerability.Job) (string, error) {"},{"number":52,"indent":1,"code":"\tif jobs.numManaged >= jobs.maxJobs {"},{"number":53,"indent":2,"code":"\t\treturn \"\", fmt.Errorf(\"job queue full; try again later\")"},{"number":54,"indent":1,"code":"\t}"},{"number":55,"indent":0,"code":""},{"number":56,"indent":1,"code":"\tnewID := generateID(numJobIDBytes, func(id string) bool {"},{"number":57,"indent":2,"code":"\t\t_, found := jobs.managing[id]"},{"number":58,"indent":2,"code":"\t\treturn !found"},{"number":59,"indent":1,"code":"\t})"},{"number":60,"indent":0,"code":""},{"number":61,"indent":1,"code":"\tjobs.managing[newID] = job"},{"number":62,"indent":1,"code":"\tjobs.numManaged++"},{"number":63,"indent":1,"code":"\treturn newID, nil"},{"number":64,"indent":0,"code":"}"},{"number":65,"indent":0,"code":""},{"number":66,"indent":0,"code":"// Retrieve finds a job being handled by the manager and reads results from it."},{"number":67,"indent":0,"code":"func (jobs *VulnJobManager) Retrieve(jobID string) ("},{"number":68,"indent":1,"code":"\t[]vulnerability.Vulnerability,"},{"number":69,"indent":1,"code":"\t[]error,"},{"number":70,"indent":1,"code":"\tcomplete,"},{"number":71,"indent":0,"code":") {"},{"number":72,"indent":1,"code":"\tjob, found := jobs.managing[jobID]"},{"number":73,"indent":1,"code":"\tvulns := []vulnerability.Vulnerability{}"},{"number":74,"indent":1,"code":"\terrs := []error{}"},{"number":75,"indent":1,"code":"\tfin := complete(false)"},{"number":76,"indent":0,"code":""},{"number":77,"indent":1,"code":"\tif !found {"},{"number":78,"indent":2,"code":"\t\treturn []vulnerability.Vulnerability{}, []error{fmt.Errorf(errNoSuchJob)}, fin"},{"number":79,"indent":1,"code":"\t}"},{"number":80,"indent":0,"code":""},{"number":81,"indent":1,"code":"\tstopAt := time.Now().Add(jobs.maxReadTime)"},{"number":82,"indent":0,"code":""},{"number":83,"indent":0,"code":"readUntilTimeout:"},{"number":84,"indent":1,"code":"\tfor {"},{"number":85,"indent":2,"code":"\t\ttimeLeft := time.Until(stopAt)"},{"number":86,"indent":2,"code":"\t\tselect {"},{"number":87,"indent":2,"code":"\t\tcase <-time.After(timeLeft):"},{"number":88,"indent":3,"code":"\t\t\tbreak readUntilTimeout"},{"number":89,"indent":0,"code":""},{"number":90,"indent":2,"code":"\t\tcase <-job.Finished:"},{"number":91,"indent":3,"code":"\t\t\tdelete(jobs.managing, jobID)"},{"number":92,"indent":3,"code":"\t\t\tjobs.numManaged--"},{"number":93,"indent":3,"code":"\t\t\tfin = complete(true)"},{"number":94,"indent":3,"code":"\t\t\tbreak readUntilTimeout"},{"number":95,"indent":0,"code":""},{"number":96,"indent":2,"code":"\t\tcase err := <-job.Errors:"},{"number":97,"indent":3,"code":"\t\t\terrs = append(errs, err)"},{"number":98,"indent":0,"code":""},{"number":99,"indent":2,"code":"\t\tcase vuln := <-job.Vulns:"},{"number":100,"indent":3,"code":"\t\t\tvulns = append(vulns, vuln)"},{"number":101,"indent":2,"code":"\t\t}"},{"number":102,"indent":1,"code":"\t}"},{"number":103,"indent":0,"code":""},{"number":104,"indent":1,"code":"\treturn vulns, errs, fin"},{"number":105,"indent":0,"code":"}"},{"number":106,"indent":0,"code":""},{"number":107,"indent":0,"code":"func (opts *VulnJobManagerOptions) applyDefaults() {"},{"number":108,"indent":1,"code":"\tif opts.MaxJobs == 0 {"},{"number":109,"indent":2,"code":"\t\topts.MaxJobs = defaultMaxJobs"},{"number":110,"indent":1,"code":"\t}"},{"number":111,"indent":1,"code":"\tif opts.ReadTimeout == 0 {"},{"number":112,"indent":2,"code":"\t\topts.ReadTimeout = defaultReadTimeout"},{"number":113,"indent":1,"code":"\t}"},{"number":114,"indent":0,"code":"}"},{"number":115,"indent":0,"code":""},{"number":116,"indent":0,"code":"func generateID(numBytes uint, unique func(string) bool) string {"},{"number":117,"indent":1,"code":"\tbuffer := make([]byte, numBytes)"},{"number":118,"indent":1,"code":"\tfor {"},{"number":119,"indent":2,"code":"\t\tbytesRead, err := rand.Read(buffer)"},{"number":120,"indent":2,"code":"\t\tif err != nil || bytesRead < 0 || uint(bytesRead) < numBytes {"},{"number":121,"indent":3,"code":"\t\t\tcontinue"},{"number":122,"indent":2,"code":"\t\t}"},{"number":123,"indent":2,"code":"\t\tencoded := hex.EncodeToString(buffer)"},{"number":124,"indent":2,"code":"\t\tif unique(encoded) {"},{"number":125,"indent":3,"code":"\t\t\treturn encoded"},{"number":126,"indent":2,"code":"\t\t}"},{"number":127,"indent":1,"code":"\t}"},{"number":128,"indent":0,"code":"}"},{"number":129,"indent":0,"code":""}]}]},{"languageName":"python","sourceFiles":[]}]